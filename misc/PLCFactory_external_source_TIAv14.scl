FUNCTION_BLOCK "_UtilitiesFB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      CPUSytemMemoryBits { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Byte;   // Address of system memory byte
      CPUClockMemoryBits { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Byte;   // Address of clock memory byte
      StartupDelaySP { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Time;   // Delay before startup delay bit turned on
   END_VAR

   VAR 
      AlwaysOn { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit always TRUE
      AlwaysTrue { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit always TRUE
      AlwaysOff { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit always FALSE
      AlwaysFalse { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit always FALSE
      FirstScan { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit TRUE for only the first scan of the PLC
      StartupDelayDn { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit initially FALSE, turning TRUE after preset delay
      StartupDelayTmr { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : IEC_TIMER;
      Square_100ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit FALSE/TRUE based on square wave (100 ms frequency)
      Square_100msONS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
      Pulse_100ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit TRUE every 100 ms for one PLC scan
      Square_200ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit FALSE/TRUE based on square wave (200 ms frequency)
      Square_200msONS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
      Pulse_200ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit TRUE every 200 ms for one PLC scan
      Square_400ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit FALSE/TRUE based on square wave (400 ms frequency)
      Square_400msONS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
      Pulse_400ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit TRUE every 400 ms for one PLC scan
      Square_500ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit FALSE/TRUE based on square wave (500 ms frequency)
      Square_500msONS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
      Pulse_500ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit TRUE every 500 ms for one PLC scan
      Square_800ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit FALSE/TRUE based on square wave (800 ms frequency)
      Square_800msONS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
      Pulse_800ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit TRUE every 800 ms for one PLC scan
      Square_1s { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit FALSE/TRUE based on square wave (1 s frequency)
      Square_1sONS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
      Pulse_1s { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit TRUE every 1 s for one PLC scan
      Square_1600ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit FALSE/TRUE based on square wave (1600 ms frequency)
      Square_1600msONS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
      Pulse_1600ms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit TRUE every 1600 ms for one PLC scan
      Square_2s { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit FALSE/TRUE based on square wave (2 s frequency)
      Square_2sONS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
      Pulse_2s { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Bit TRUE every 2 s for one PLC scan
      TestInProgress { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Indicates which caller FC is used
      EPICS_Device_calls_precessed { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;   // Indicates which caller FC is used
   END_VAR

BEGIN
	//This block provides standard "Utilities" tags that can be used in the rest OF the PLC code such
	//as:
	//* Always On
	//* Always Off
	//* Startup Delay
	//* Pulses (different frequences)
	//* etc.

	//When using This block in your program, name the instance DB "Utilities" AND THEN you will be able TO use tags like "Utilities.AlwaysOn" in the rest OF your program.

	//This block relies On information provided BY the CPU. This needs TO be enabled in the CPU hardware configuration under System AND Clock Memory.
	//Enable both functions AND pick memory bytes you'd like TO use (defauls are %MB1 AND %MB0 respectively).
	//THEN connect the selected Byte TO the inputs OF This block.
	//

	//Bit TRUE for only the first scan of the PLC
	#FirstScan := #CPUSytemMemoryBits.%X0;

	//Bit always TRUE
	#AlwaysOn := #CPUSytemMemoryBits.%X2;
	#AlwaysTrue := #CPUSytemMemoryBits.%X2;

	//Bit always FALSE
	#AlwaysOff := #CPUSytemMemoryBits.%X3;
	#AlwaysFalse := #CPUSytemMemoryBits.%X3;

	//Bit initially FALSE, turning TRUE after preset delay
	#StartupDelayTmr.TON(IN := #AlwaysTrue,
	                     PT := #StartupDelaySP,
	                     Q => #StartupDelayDn);

	//Bit TRUE every 100 ms FOR one PLC scan
	#Square_100ms := #CPUClockMemoryBits.%X0;
	"UTIL_P_TRIG"("i_Input Bit" := #Square_100ms,
	              "iq_Trigger Bit" := #Square_100msONS,
	              "iq_Pulse Bit" := #Pulse_100ms);

	//Bit TRUE every 200 ms FOR one PLC scan
	#Square_200ms := #CPUClockMemoryBits.%X1;
	"UTIL_P_TRIG"("i_Input Bit" := #Square_200ms,
	              "iq_Trigger Bit" := #Square_200msONS,
	              "iq_Pulse Bit" := #Pulse_200ms);

	//Bit TRUE every 400 ms FOR one PLC scan
	#Square_400ms := #CPUClockMemoryBits.%X2;
	"UTIL_P_TRIG"("i_Input Bit" := #Square_400ms,
	              "iq_Trigger Bit" := #Square_400msONS,
	              "iq_Pulse Bit" := #Pulse_400ms);

	//Bit TRUE every 500 ms FOR one PLC scan
	#Square_500ms := #CPUClockMemoryBits.%X3;
	"UTIL_P_TRIG"("i_Input Bit" := #Square_500ms,
	              "iq_Trigger Bit" := #Square_500msONS,
	              "iq_Pulse Bit" := #Pulse_500ms);

	//Bit TRUE every 800 ms FOR one PLC scan
	#Square_800ms := #CPUClockMemoryBits.%X4;
	"UTIL_P_TRIG"("i_Input Bit" := #Square_800ms,
	              "iq_Trigger Bit" := #Square_800msONS,
	              "iq_Pulse Bit" := #Pulse_800ms);

	//Bit TRUE every 1 s FOR one PLC scan
	#Square_1s := #CPUClockMemoryBits.%X5;
	"UTIL_P_TRIG"("i_Input Bit" := #Square_1s,
	              "iq_Trigger Bit" := #Square_1sONS,
	              "iq_Pulse Bit" := #Pulse_1s);

	//Bit TRUE every 1600 ms FOR one PLC scan
	#Square_1600ms := #CPUClockMemoryBits.%X6;
	"UTIL_P_TRIG"("i_Input Bit" := #Square_1600ms,
	              "iq_Trigger Bit" := #Square_1600msONS,
	              "iq_Pulse Bit" := #Pulse_1600ms);

	//Bit TRUE every 2s FOR one PLC scan
	#Square_2s := #CPUClockMemoryBits.%X7;
	"UTIL_P_TRIG"("i_Input Bit" := #Square_2s,
	              "iq_Trigger Bit" := #Square_2sONS,
	              "iq_Pulse Bit" := #Pulse_2s);

END_FUNCTION_BLOCK
DATA_BLOCK "Utilities"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"_UtilitiesFB"

BEGIN

END_DATA_BLOCK
FUNCTION_BLOCK "DEVTYPE_PLC"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_INPUT
      "SW_Checksum" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : STRING;   //EPICS Status variable: SW_Checksum
      "Text_Checksum" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : STRING;   //EPICS Status variable: Text_Checksum
      "CPU_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: CPU_Connected
      "CPU_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: CPU_Status
      "RIO1_IM_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_IM_Connected
      "RIO1_DI1_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DI1_Connected
      "RIO1_DI2_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DI2_Connected
      "RIO1_DI3_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DI3_Connected
      "RIO1_DI4_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DI4_Connected
      "RIO1_DI5_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DI5_Connected
      "RIO1_AI1_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_AI1_Connected
      "RIO1_AI2_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_AI2_Connected
      "RIO1_AI3_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_AI3_Connected
      "RIO1_AI4_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_AI4_Connected
      "RIO1_DO1_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DO1_Connected
      "RIO1_DO2_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DO2_Connected
      "RIO1_DO3_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DO3_Connected
      "RIO1_SvrMod_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_SvrMod_Connected
      "RIO1_IM_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_IM_Status
      "RIO1_DI1_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DI1_Status
      "RIO1_DI2_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DI2_Status
      "RIO1_DI3_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DI3_Status
      "RIO1_DI4_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DI4_Status
      "RIO1_DI5_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DI5_Status
      "RIO1_AI1_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_AI1_Status
      "RIO1_AI2_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_AI2_Status
      "RIO1_AI3_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_AI3_Status
      "RIO1_AI4_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_AI4_Status
      "RIO1_DO1_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DO1_Status
      "RIO1_DO2_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DO2_Status
      "RIO1_DO3_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_DO3_Status
      "RIO1_SvrMod_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO1_SvrMod_Status
      "RIO2_IM_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_IM_Connected
      "RIO2_DI1_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DI1_Connected
      "RIO2_DI2_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DI2_Connected
      "RIO2_DI3_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DI3_Connected
      "RIO2_DI4_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DI4_Connected
      "RIO2_DI5_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DI5_Connected
      "RIO2_AI1_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_AI1_Connected
      "RIO2_AI2_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_AI2_Connected
      "RIO2_AI3_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_AI3_Connected
      "RIO2_AI4_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_AI4_Connected
      "RIO2_DO1_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DO1_Connected
      "RIO2_DO2_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DO2_Connected
      "RIO2_DO3_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DO3_Connected
      "RIO2_SvrMod_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_SvrMod_Connected
      "RIO2_IM_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_IM_Status
      "RIO2_DI1_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DI1_Status
      "RIO2_DI2_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DI2_Status
      "RIO2_DI3_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DI3_Status
      "RIO2_DI4_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DI4_Status
      "RIO2_DI5_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DI5_Status
      "RIO2_AI1_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_AI1_Status
      "RIO2_AI2_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_AI2_Status
      "RIO2_AI3_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_AI3_Status
      "RIO2_AI4_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_AI4_Status
      "RIO2_DO1_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DO1_Status
      "RIO2_DO2_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DO2_Status
      "RIO2_DO3_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_DO3_Status
      "RIO2_SvrMod_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO2_SvrMod_Status
      "RIO3_IM_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_IM_Connected
      "RIO3_DI1_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DI1_Connected
      "RIO3_DI2_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DI2_Connected
      "RIO3_DI3_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DI3_Connected
      "RIO3_DI4_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DI4_Connected
      "RIO3_DI5_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DI5_Connected
      "RIO3_AI1_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_AI1_Connected
      "RIO3_AI2_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_AI2_Connected
      "RIO3_AI3_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_AI3_Connected
      "RIO3_AI4_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_AI4_Connected
      "RIO3_DO1_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DO1_Connected
      "RIO3_DO2_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DO2_Connected
      "RIO3_DO3_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DO3_Connected
      "RIO3_SvrMod_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_SvrMod_Connected
      "RIO3_IM_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_IM_Status
      "RIO3_DI1_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DI1_Status
      "RIO3_DI2_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DI2_Status
      "RIO3_DI3_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DI3_Status
      "RIO3_DI4_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DI4_Status
      "RIO3_DI5_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DI5_Status
      "RIO3_AI1_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_AI1_Status
      "RIO3_AI2_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_AI2_Status
      "RIO3_AI3_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_AI3_Status
      "RIO3_AI4_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_AI4_Status
      "RIO3_DO1_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DO1_Status
      "RIO3_DO2_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DO2_Status
      "RIO3_DO3_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_DO3_Status
      "RIO3_SvrMod_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: RIO3_SvrMod_Status
      "SCL1_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: SCL1_Connected
      "SCL1_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: SCL1_Status
      "SCL2_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: SCL2_Connected
      "SCL2_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: SCL2_Status
      "SCL3_Connected" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: SCL3_Connected
      "SCL3_Status" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: SCL3_Status
   EPICSToPLCLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Length of device command register array (in words)
   EPICSToPLCDataBlockOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Offset in EPICS->PLC comms block where this device data resides (in words)
   PLCToEPICSLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Length of device status register array (in words)
   PLCToEPICSDataBlockOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Offset in PLC->EPICS comms block where this device data resides (in words)
   END_VAR
   VAR_OUTPUT
      DEVICE_PARAM_OK { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
   END_VAR
   VAR_IN_OUT
   END_VAR
   Var DB_SPECIFIC
      MyWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Word;
      MyBytesinWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyWord : Array[0..1] of Byte;
      MyBoolsinWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyWord : Array[0..15] of Bool;
      MyDInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : DInt;
      MyWordsinDint { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyDInt : Array[0..1] of Word;
      MyReal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Real;
      MyWordsinReal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyReal : Array[0..1] of Word;
      MyInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;
      MyWordinInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyInt : Word;
      MyDWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : DWord;
      MyWordsinDWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyDWord : Array[0..1] of Word;
      MyTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Time;
      MyWordsinTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyTime : Array[0..1] of Word;
      MyString { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : String[40];
      MyWordsinString { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyString : Array[0..20] of Word;
   END_VAR
   VAR_TEMP
      HashModbus : DInt;
      HashIFA : DInt;
      HashTIAMap : DInt;
      i : Int;
   END_VAR
    //Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2020 by European Spallation Source, Lund
    //This block was generated by PLCFactory, please don't change it MANUALLY!
    //Input File Name: KG-GTA_ODH-PLC-01-template-IFA-20200616104928.ifa
    //Generated: 20200616104928
    //According to HASH: -165088913
    //Device type: PLC
    //Description: This function does the variable mapping for a device. All device-variable will be linked to an interface variable defined in this block.

    //********************************************
    //****************HASH check******************
    //********************************************


    #MyWordsinDint[0] := "EPICSToPLC"."Word"[0];
    #MyWordsinDint[1] := "EPICSToPLC"."Word"[1];
    #HashModbus := #MyDInt; //Hash from EPICS/ModbusTCP

    #HashIFA := -165088913; //Hash from Interface Factory as a constant

    #MyWordsinDint[0] := "PLCToEPICS"."Word"[0];
    #MyWordsinDint[1] := "PLCToEPICS"."Word"[1];
    #HashTIAMap := #MyDInt; //Hash from PLCFactory TIA Map


    IF ((#HashIFA = #HashModbus) AND (#HashModbus = #HashTIAMap)) THEN //Check CRCs
        #DEVICE_PARAM_OK := TRUE;
       //########################### ODH Detection System   ##############################
       //###########################
       //STATUS BLOCK
       //###########################

    //********************************************
    //*************STATUS VARIABLES***************
    //********************************************


       // Clear the buffer of any residual data, but skip the first word as that is the actual and maximum length
       FOR #i:=1 TO 20 DO
            #MyWordsinString[#i] := 0;
       END_FOR;
       #MyString := #"SW_Checksum";  //EPICSName: SW_Checksum
       FOR #i:=0 TO 7 DO
            "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 0 + #i] := #MyWordsinString[#i + 1];
       END_FOR;
       // Terminate C-string
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 0 + 8] := 0;

       // Clear the buffer of any residual data, but skip the first word as that is the actual and maximum length
       FOR #i:=1 TO 20 DO
            #MyWordsinString[#i] := 0;
       END_FOR;
       #MyString := #"Text_Checksum";  //EPICSName: Text_Checksum
       FOR #i:=0 TO 7 DO
            "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 9 + #i] := #MyWordsinString[#i + 1];
       END_FOR;
       // Terminate C-string
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 9 + 8] := 0;

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"CPU_Connected";    //EPICSName: CPU_Connected
       #MyBoolsinWord[9] := #"CPU_Status";    //EPICSName: CPU_Status
       #MyBoolsinWord[10] := #"RIO1_IM_Connected";    //EPICSName: RIO1_IM_Connected
       #MyBoolsinWord[11] := #"RIO1_DI1_Connected";    //EPICSName: RIO1_DI1_Connected
       #MyBoolsinWord[12] := #"RIO1_DI2_Connected";    //EPICSName: RIO1_DI2_Connected
       #MyBoolsinWord[13] := #"RIO1_DI3_Connected";    //EPICSName: RIO1_DI3_Connected
       #MyBoolsinWord[14] := #"RIO1_DI4_Connected";    //EPICSName: RIO1_DI4_Connected
       #MyBoolsinWord[15] := #"RIO1_DI5_Connected";    //EPICSName: RIO1_DI5_Connected
       #MyBoolsinWord[0] := #"RIO1_AI1_Connected";    //EPICSName: RIO1_AI1_Connected
       #MyBoolsinWord[1] := #"RIO1_AI2_Connected";    //EPICSName: RIO1_AI2_Connected
       #MyBoolsinWord[2] := #"RIO1_AI3_Connected";    //EPICSName: RIO1_AI3_Connected
       #MyBoolsinWord[3] := #"RIO1_AI4_Connected";    //EPICSName: RIO1_AI4_Connected
       #MyBoolsinWord[4] := #"RIO1_DO1_Connected";    //EPICSName: RIO1_DO1_Connected
       #MyBoolsinWord[5] := #"RIO1_DO2_Connected";    //EPICSName: RIO1_DO2_Connected
       #MyBoolsinWord[6] := #"RIO1_DO3_Connected";    //EPICSName: RIO1_DO3_Connected
       #MyBoolsinWord[7] := #"RIO1_SvrMod_Connected";    //EPICSName: RIO1_SvrMod_Connected
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 18] := #MyWord;

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"RIO1_IM_Status";    //EPICSName: RIO1_IM_Status
       #MyBoolsinWord[9] := #"RIO1_DI1_Status";    //EPICSName: RIO1_DI1_Status
       #MyBoolsinWord[10] := #"RIO1_DI2_Status";    //EPICSName: RIO1_DI2_Status
       #MyBoolsinWord[11] := #"RIO1_DI3_Status";    //EPICSName: RIO1_DI3_Status
       #MyBoolsinWord[12] := #"RIO1_DI4_Status";    //EPICSName: RIO1_DI4_Status
       #MyBoolsinWord[13] := #"RIO1_DI5_Status";    //EPICSName: RIO1_DI5_Status
       #MyBoolsinWord[14] := #"RIO1_AI1_Status";    //EPICSName: RIO1_AI1_Status
       #MyBoolsinWord[15] := #"RIO1_AI2_Status";    //EPICSName: RIO1_AI2_Status
       #MyBoolsinWord[0] := #"RIO1_AI3_Status";    //EPICSName: RIO1_AI3_Status
       #MyBoolsinWord[1] := #"RIO1_AI4_Status";    //EPICSName: RIO1_AI4_Status
       #MyBoolsinWord[2] := #"RIO1_DO1_Status";    //EPICSName: RIO1_DO1_Status
       #MyBoolsinWord[3] := #"RIO1_DO2_Status";    //EPICSName: RIO1_DO2_Status
       #MyBoolsinWord[4] := #"RIO1_DO3_Status";    //EPICSName: RIO1_DO3_Status
       #MyBoolsinWord[5] := #"RIO1_SvrMod_Status";    //EPICSName: RIO1_SvrMod_Status
       #MyBoolsinWord[6] := #"RIO2_IM_Connected";    //EPICSName: RIO2_IM_Connected
       #MyBoolsinWord[7] := #"RIO2_DI1_Connected";    //EPICSName: RIO2_DI1_Connected
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 19] := #MyWord;

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"RIO2_DI2_Connected";    //EPICSName: RIO2_DI2_Connected
       #MyBoolsinWord[9] := #"RIO2_DI3_Connected";    //EPICSName: RIO2_DI3_Connected
       #MyBoolsinWord[10] := #"RIO2_DI4_Connected";    //EPICSName: RIO2_DI4_Connected
       #MyBoolsinWord[11] := #"RIO2_DI5_Connected";    //EPICSName: RIO2_DI5_Connected
       #MyBoolsinWord[12] := #"RIO2_AI1_Connected";    //EPICSName: RIO2_AI1_Connected
       #MyBoolsinWord[13] := #"RIO2_AI2_Connected";    //EPICSName: RIO2_AI2_Connected
       #MyBoolsinWord[14] := #"RIO2_AI3_Connected";    //EPICSName: RIO2_AI3_Connected
       #MyBoolsinWord[15] := #"RIO2_AI4_Connected";    //EPICSName: RIO2_AI4_Connected
       #MyBoolsinWord[0] := #"RIO2_DO1_Connected";    //EPICSName: RIO2_DO1_Connected
       #MyBoolsinWord[1] := #"RIO2_DO2_Connected";    //EPICSName: RIO2_DO2_Connected
       #MyBoolsinWord[2] := #"RIO2_DO3_Connected";    //EPICSName: RIO2_DO3_Connected
       #MyBoolsinWord[3] := #"RIO2_SvrMod_Connected";    //EPICSName: RIO2_SvrMod_Connected
       #MyBoolsinWord[4] := #"RIO2_IM_Status";    //EPICSName: RIO2_IM_Status
       #MyBoolsinWord[5] := #"RIO2_DI1_Status";    //EPICSName: RIO2_DI1_Status
       #MyBoolsinWord[6] := #"RIO2_DI2_Status";    //EPICSName: RIO2_DI2_Status
       #MyBoolsinWord[7] := #"RIO2_DI3_Status";    //EPICSName: RIO2_DI3_Status
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 20] := #MyWord;

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"RIO2_DI4_Status";    //EPICSName: RIO2_DI4_Status
       #MyBoolsinWord[9] := #"RIO2_DI5_Status";    //EPICSName: RIO2_DI5_Status
       #MyBoolsinWord[10] := #"RIO2_AI1_Status";    //EPICSName: RIO2_AI1_Status
       #MyBoolsinWord[11] := #"RIO2_AI2_Status";    //EPICSName: RIO2_AI2_Status
       #MyBoolsinWord[12] := #"RIO2_AI3_Status";    //EPICSName: RIO2_AI3_Status
       #MyBoolsinWord[13] := #"RIO2_AI4_Status";    //EPICSName: RIO2_AI4_Status
       #MyBoolsinWord[14] := #"RIO2_DO1_Status";    //EPICSName: RIO2_DO1_Status
       #MyBoolsinWord[15] := #"RIO2_DO2_Status";    //EPICSName: RIO2_DO2_Status
       #MyBoolsinWord[0] := #"RIO2_DO3_Status";    //EPICSName: RIO2_DO3_Status
       #MyBoolsinWord[1] := #"RIO2_SvrMod_Status";    //EPICSName: RIO2_SvrMod_Status
       #MyBoolsinWord[2] := #"RIO3_IM_Connected";    //EPICSName: RIO3_IM_Connected
       #MyBoolsinWord[3] := #"RIO3_DI1_Connected";    //EPICSName: RIO3_DI1_Connected
       #MyBoolsinWord[4] := #"RIO3_DI2_Connected";    //EPICSName: RIO3_DI2_Connected
       #MyBoolsinWord[5] := #"RIO3_DI3_Connected";    //EPICSName: RIO3_DI3_Connected
       #MyBoolsinWord[6] := #"RIO3_DI4_Connected";    //EPICSName: RIO3_DI4_Connected
       #MyBoolsinWord[7] := #"RIO3_DI5_Connected";    //EPICSName: RIO3_DI5_Connected
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 21] := #MyWord;

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"RIO3_AI1_Connected";    //EPICSName: RIO3_AI1_Connected
       #MyBoolsinWord[9] := #"RIO3_AI2_Connected";    //EPICSName: RIO3_AI2_Connected
       #MyBoolsinWord[10] := #"RIO3_AI3_Connected";    //EPICSName: RIO3_AI3_Connected
       #MyBoolsinWord[11] := #"RIO3_AI4_Connected";    //EPICSName: RIO3_AI4_Connected
       #MyBoolsinWord[12] := #"RIO3_DO1_Connected";    //EPICSName: RIO3_DO1_Connected
       #MyBoolsinWord[13] := #"RIO3_DO2_Connected";    //EPICSName: RIO3_DO2_Connected
       #MyBoolsinWord[14] := #"RIO3_DO3_Connected";    //EPICSName: RIO3_DO3_Connected
       #MyBoolsinWord[15] := #"RIO3_SvrMod_Connected";    //EPICSName: RIO3_SvrMod_Connected
       #MyBoolsinWord[0] := #"RIO3_IM_Status";    //EPICSName: RIO3_IM_Status
       #MyBoolsinWord[1] := #"RIO3_DI1_Status";    //EPICSName: RIO3_DI1_Status
       #MyBoolsinWord[2] := #"RIO3_DI2_Status";    //EPICSName: RIO3_DI2_Status
       #MyBoolsinWord[3] := #"RIO3_DI3_Status";    //EPICSName: RIO3_DI3_Status
       #MyBoolsinWord[4] := #"RIO3_DI4_Status";    //EPICSName: RIO3_DI4_Status
       #MyBoolsinWord[5] := #"RIO3_DI5_Status";    //EPICSName: RIO3_DI5_Status
       #MyBoolsinWord[6] := #"RIO3_AI1_Status";    //EPICSName: RIO3_AI1_Status
       #MyBoolsinWord[7] := #"RIO3_AI2_Status";    //EPICSName: RIO3_AI2_Status
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 22] := #MyWord;

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"RIO3_AI3_Status";    //EPICSName: RIO3_AI3_Status
       #MyBoolsinWord[9] := #"RIO3_AI4_Status";    //EPICSName: RIO3_AI4_Status
       #MyBoolsinWord[10] := #"RIO3_DO1_Status";    //EPICSName: RIO3_DO1_Status
       #MyBoolsinWord[11] := #"RIO3_DO2_Status";    //EPICSName: RIO3_DO2_Status
       #MyBoolsinWord[12] := #"RIO3_DO3_Status";    //EPICSName: RIO3_DO3_Status
       #MyBoolsinWord[13] := #"RIO3_SvrMod_Status";    //EPICSName: RIO3_SvrMod_Status
       #MyBoolsinWord[14] := #"SCL1_Connected";    //EPICSName: SCL1_Connected
       #MyBoolsinWord[15] := #"SCL1_Status";    //EPICSName: SCL1_Status
       #MyBoolsinWord[0] := #"SCL2_Connected";    //EPICSName: SCL2_Connected
       #MyBoolsinWord[1] := #"SCL2_Status";    //EPICSName: SCL2_Status
       #MyBoolsinWord[2] := #"SCL3_Connected";    //EPICSName: SCL3_Connected
       #MyBoolsinWord[3] := #"SCL3_Status";    //EPICSName: SCL3_Status
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 23] := #MyWord;
    Else
       #DEVICE_PARAM_OK := FALSE; //Invalid Hash
    END_IF;
END_FUNCTION_BLOCK
FUNCTION_BLOCK "DEVTYPE_ODH_Area"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_INPUT
      "Alarm" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: Alarm
      "WarmUp" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: WarmUp
      "ConnLost" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: ConnLost
   EPICSToPLCLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Length of device command register array (in words)
   EPICSToPLCDataBlockOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Offset in EPICS->PLC comms block where this device data resides (in words)
   PLCToEPICSLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Length of device status register array (in words)
   PLCToEPICSDataBlockOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Offset in PLC->EPICS comms block where this device data resides (in words)
   END_VAR
   VAR_OUTPUT
      DEVICE_PARAM_OK { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
   END_VAR
   VAR_IN_OUT
   END_VAR
   Var DB_SPECIFIC
      MyWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Word;
      MyBytesinWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyWord : Array[0..1] of Byte;
      MyBoolsinWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyWord : Array[0..15] of Bool;
      MyDInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : DInt;
      MyWordsinDint { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyDInt : Array[0..1] of Word;
      MyReal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Real;
      MyWordsinReal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyReal : Array[0..1] of Word;
      MyInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;
      MyWordinInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyInt : Word;
      MyDWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : DWord;
      MyWordsinDWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyDWord : Array[0..1] of Word;
      MyTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Time;
      MyWordsinTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyTime : Array[0..1] of Word;
      MyString { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : String[40];
      MyWordsinString { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyString : Array[0..20] of Word;
   END_VAR
   VAR_TEMP
      HashModbus : DInt;
      HashIFA : DInt;
      HashTIAMap : DInt;
      i : Int;
   END_VAR
    //Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2020 by European Spallation Source, Lund
    //This block was generated by PLCFactory, please don't change it MANUALLY!
    //Input File Name: KG-GTA_ODH-PLC-01-template-IFA-20200616104928.ifa
    //Generated: 20200616104928
    //According to HASH: -165088913
    //Device type: ODH_Area
    //Description: This function does the variable mapping for a device. All device-variable will be linked to an interface variable defined in this block.

    //********************************************
    //****************HASH check******************
    //********************************************


    #MyWordsinDint[0] := "EPICSToPLC"."Word"[0];
    #MyWordsinDint[1] := "EPICSToPLC"."Word"[1];
    #HashModbus := #MyDInt; //Hash from EPICS/ModbusTCP

    #HashIFA := -165088913; //Hash from Interface Factory as a constant

    #MyWordsinDint[0] := "PLCToEPICS"."Word"[0];
    #MyWordsinDint[1] := "PLCToEPICS"."Word"[1];
    #HashTIAMap := #MyDInt; //Hash from PLCFactory TIA Map


    IF ((#HashIFA = #HashModbus) AND (#HashModbus = #HashTIAMap)) THEN //Check CRCs
        #DEVICE_PARAM_OK := TRUE;
       //########################### ODH Detection System   ##############################
       //###########################
       //STATUS BLOCK
       //###########################

    //********************************************
    //*************STATUS VARIABLES***************
    //********************************************


       #MyWord := W#0;
       #MyBoolsinWord[8] := #"Alarm";    //EPICSName: Alarm
       #MyBoolsinWord[9] := #"WarmUp";    //EPICSName: WarmUp
       #MyBoolsinWord[10] := #"ConnLost";    //EPICSName: ConnLost
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 0] := #MyWord;
    Else
       #DEVICE_PARAM_OK := FALSE; //Invalid Hash
    END_IF;
END_FUNCTION_BLOCK
FUNCTION_BLOCK "DEVTYPE_ODH_O2iM"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_INPUT
      "O2Level" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : REAL;   //EPICS Status variable: O2Level
      "ODHWarning" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: ODHWarning
      "ODHAlarm" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: ODHAlarm
      "MonitHealthyErr" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: MonitHealthyErr
      "Maint" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: Maint
      "SysOK" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: SysOK
      "MonitWarning" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: MonitWarning
      "WarmUp" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: WarmUp
      "ConnLost" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: ConnLost
   EPICSToPLCLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Length of device command register array (in words)
   EPICSToPLCDataBlockOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Offset in EPICS->PLC comms block where this device data resides (in words)
   PLCToEPICSLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Length of device status register array (in words)
   PLCToEPICSDataBlockOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Offset in PLC->EPICS comms block where this device data resides (in words)
   END_VAR
   VAR_OUTPUT
      DEVICE_PARAM_OK { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
   END_VAR
   VAR_IN_OUT
   END_VAR
   Var DB_SPECIFIC
      MyWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Word;
      MyBytesinWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyWord : Array[0..1] of Byte;
      MyBoolsinWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyWord : Array[0..15] of Bool;
      MyDInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : DInt;
      MyWordsinDint { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyDInt : Array[0..1] of Word;
      MyReal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Real;
      MyWordsinReal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyReal : Array[0..1] of Word;
      MyInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;
      MyWordinInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyInt : Word;
      MyDWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : DWord;
      MyWordsinDWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyDWord : Array[0..1] of Word;
      MyTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Time;
      MyWordsinTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyTime : Array[0..1] of Word;
      MyString { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : String[40];
      MyWordsinString { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyString : Array[0..20] of Word;
   END_VAR
   VAR_TEMP
      HashModbus : DInt;
      HashIFA : DInt;
      HashTIAMap : DInt;
      i : Int;
   END_VAR
    //Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2020 by European Spallation Source, Lund
    //This block was generated by PLCFactory, please don't change it MANUALLY!
    //Input File Name: KG-GTA_ODH-PLC-01-template-IFA-20200616104928.ifa
    //Generated: 20200616104928
    //According to HASH: -165088913
    //Device type: ODH_O2iM
    //Description: This function does the variable mapping for a device. All device-variable will be linked to an interface variable defined in this block.

    //********************************************
    //****************HASH check******************
    //********************************************


    #MyWordsinDint[0] := "EPICSToPLC"."Word"[0];
    #MyWordsinDint[1] := "EPICSToPLC"."Word"[1];
    #HashModbus := #MyDInt; //Hash from EPICS/ModbusTCP

    #HashIFA := -165088913; //Hash from Interface Factory as a constant

    #MyWordsinDint[0] := "PLCToEPICS"."Word"[0];
    #MyWordsinDint[1] := "PLCToEPICS"."Word"[1];
    #HashTIAMap := #MyDInt; //Hash from PLCFactory TIA Map


    IF ((#HashIFA = #HashModbus) AND (#HashModbus = #HashTIAMap)) THEN //Check CRCs
        #DEVICE_PARAM_OK := TRUE;
       //########################### ODH Detection System   ##############################
       //###########################
       //STATUS BLOCK
       //###########################

    //********************************************
    //*************STATUS VARIABLES***************
    //********************************************


       #MyReal := #"O2Level";    //EPICSName: O2Level
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 0] := #MyWordsinReal[0];
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 1] := #MyWordsinReal[1];

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"ODHWarning";    //EPICSName: ODHWarning
       #MyBoolsinWord[9] := #"ODHAlarm";    //EPICSName: ODHAlarm
       #MyBoolsinWord[10] := #"MonitHealthyErr";    //EPICSName: MonitHealthyErr
       #MyBoolsinWord[11] := #"Maint";    //EPICSName: Maint
       #MyBoolsinWord[12] := #"SysOK";    //EPICSName: SysOK
       #MyBoolsinWord[13] := #"MonitWarning";    //EPICSName: MonitWarning
       #MyBoolsinWord[14] := #"WarmUp";    //EPICSName: WarmUp
       #MyBoolsinWord[15] := #"ConnLost";    //EPICSName: ConnLost
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 2] := #MyWord;
    Else
       #DEVICE_PARAM_OK := FALSE; //Invalid Hash
    END_IF;
END_FUNCTION_BLOCK
FUNCTION_BLOCK "DEVTYPE_ODH_Rack"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_INPUT
      "SurgeArrOK" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: SurgeArrOK
      "PS24vOK" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: PS24vOK
      "UPSBatOK" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: UPSBatOK
      "UPS24vOK" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: UPS24vOK
      "UPSBuffReady" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: UPSBuffReady
      "UPSBatt85" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: UPSBatt85
      "UPSAlarm" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: UPSAlarm
      "SMAlarm" { ExternalAccessible := 'True'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : BOOL;   //EPICS Status variable: SMAlarm
   EPICSToPLCLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Length of device command register array (in words)
   EPICSToPLCDataBlockOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Offset in EPICS->PLC comms block where this device data resides (in words)
   PLCToEPICSLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Length of device status register array (in words)
   PLCToEPICSDataBlockOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;   // Offset in PLC->EPICS comms block where this device data resides (in words)
   END_VAR
   VAR_OUTPUT
      DEVICE_PARAM_OK { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Bool;
   END_VAR
   VAR_IN_OUT
   END_VAR
   Var DB_SPECIFIC
      MyWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Word;
      MyBytesinWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyWord : Array[0..1] of Byte;
      MyBoolsinWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyWord : Array[0..15] of Bool;
      MyDInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : DInt;
      MyWordsinDint { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyDInt : Array[0..1] of Word;
      MyReal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Real;
      MyWordsinReal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyReal : Array[0..1] of Word;
      MyInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Int;
      MyWordinInt { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyInt : Word;
      MyDWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : DWord;
      MyWordsinDWord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyDWord : Array[0..1] of Word;
      MyTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Time;
      MyWordsinTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyTime : Array[0..1] of Word;
      MyString { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : String[40];
      MyWordsinString { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } AT MyString : Array[0..20] of Word;
   END_VAR
   VAR_TEMP
      HashModbus : DInt;
      HashIFA : DInt;
      HashTIAMap : DInt;
      i : Int;
   END_VAR
    //Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2020 by European Spallation Source, Lund
    //This block was generated by PLCFactory, please don't change it MANUALLY!
    //Input File Name: KG-GTA_ODH-PLC-01-template-IFA-20200616104928.ifa
    //Generated: 20200616104928
    //According to HASH: -165088913
    //Device type: ODH_Rack
    //Description: This function does the variable mapping for a device. All device-variable will be linked to an interface variable defined in this block.

    //********************************************
    //****************HASH check******************
    //********************************************


    #MyWordsinDint[0] := "EPICSToPLC"."Word"[0];
    #MyWordsinDint[1] := "EPICSToPLC"."Word"[1];
    #HashModbus := #MyDInt; //Hash from EPICS/ModbusTCP

    #HashIFA := -165088913; //Hash from Interface Factory as a constant

    #MyWordsinDint[0] := "PLCToEPICS"."Word"[0];
    #MyWordsinDint[1] := "PLCToEPICS"."Word"[1];
    #HashTIAMap := #MyDInt; //Hash from PLCFactory TIA Map


    IF ((#HashIFA = #HashModbus) AND (#HashModbus = #HashTIAMap)) THEN //Check CRCs
        #DEVICE_PARAM_OK := TRUE;
       //########################### ODH Detection System   ##############################
       //###########################
       //STATUS BLOCK
       //###########################

    //********************************************
    //*************STATUS VARIABLES***************
    //********************************************


       #MyWord := W#0;
       #MyBoolsinWord[8] := #"SurgeArrOK";    //EPICSName: SurgeArrOK
       #MyBoolsinWord[9] := #"PS24vOK";    //EPICSName: PS24vOK
       #MyBoolsinWord[10] := #"UPSBatOK";    //EPICSName: UPSBatOK
       #MyBoolsinWord[11] := #"UPS24vOK";    //EPICSName: UPS24vOK
       #MyBoolsinWord[12] := #"UPSBuffReady";    //EPICSName: UPSBuffReady
       #MyBoolsinWord[13] := #"UPSBatt85";    //EPICSName: UPSBatt85
       #MyBoolsinWord[14] := #"UPSAlarm";    //EPICSName: UPSAlarm
       #MyBoolsinWord[15] := #"SMAlarm";    //EPICSName: SMAlarm
       "PLCToEPICS"."Word"[#PLCToEPICSDataBlockOffset + 0] := #MyWord;
    Else
       #DEVICE_PARAM_OK := FALSE; //Invalid Hash
    END_IF;
END_FUNCTION_BLOCK

DATA_BLOCK "DEV_KG-GTA:ODH-PLC-01_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_PLC"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CTLG-CS:ODH-Area_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Area"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-Area_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Area"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-Area_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Area"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-DogSh:ODH-Area_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Area"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CTLG-CS:ODH-O2iM-20_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CTLG-CS:ODH-O2iM-21_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CTLG-CS:ODH-O2iM-22_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-13_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-14_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-15_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-16_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-17_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-18_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-19_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-O2iM-1_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-O2iM-2_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-O2iM-3_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-O2iM-4_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-O2iM-5_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-DogSh:ODH-O2iM-12_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-HPGS:ODH-O2iM-10_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-HPGS:ODH-O2iM-11_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-TCH:ODH-O2iM-6_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-TCH:ODH-O2iM-7_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-TCH:ODH-O2iM-8_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-TCH:ODH-O2iM-9_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-RIO-2_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Rack"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-RIO-1_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Rack"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_TS2-020Row:CnPw-U-001_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Rack"
BEGIN
END_DATA_BLOCK

FUNCTION "EPICS_device_calls" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0

   VAR_TEMP
      "KG-GTA:ODH-PLC-01" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-Area" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-Area" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-Area" : Bool;   // HASH codes are OK
      "HCB-DogSh:ODH-Area" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-O2iM-20" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-O2iM-21" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-O2iM-22" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-13" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-14" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-15" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-16" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-17" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-18" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-19" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-1" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-2" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-3" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-4" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-5" : Bool;   // HASH codes are OK
      "HCB-DogSh:ODH-O2iM-12" : Bool;   // HASH codes are OK
      "HCB-HPGS:ODH-O2iM-10" : Bool;   // HASH codes are OK
      "HCB-HPGS:ODH-O2iM-11" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-6" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-7" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-8" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-9" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-RIO-2" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-RIO-1" : Bool;   // HASH codes are OK
      "TS2-020Row:CnPw-U-001" : Bool;   // HASH codes are OK
   END_VAR

BEGIN
      //Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2020 by European Spallation Source, Lund
      //This block was generated by PLCFactory
      //According to HASH:-165088913
      //Description: Description: This function calls the devices according to the corresponding device type

        //DO NOT Modify the following line!!!
        "Utilities".TestInProgress := FALSE;
        "Utilities".EPICS_Device_calls_precessed := TRUE;


        //********************************************
        // Device name: KG-GTA:ODH-PLC-01
        // Device type: PLC
        //********************************************

      "DEV_KG-GTA:ODH-PLC-01_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=24,
      PLCToEPICSDataBlockOffset:=0+10);

        //********************************************
        // Device name: CTLG-CS:ODH-Area
        // Device type: ODH_Area
        //********************************************

      "DEV_CTLG-CS:ODH-Area_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=1,
      PLCToEPICSDataBlockOffset:=24+10);

        //********************************************
        // Device name: CXB-CXH:ODH-Area
        // Device type: ODH_Area
        //********************************************

      "DEV_CXB-CXH:ODH-Area_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=1,
      PLCToEPICSDataBlockOffset:=25+10);

        //********************************************
        // Device name: HCB-ACH:ODH-Area
        // Device type: ODH_Area
        //********************************************

      "DEV_HCB-ACH:ODH-Area_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=1,
      PLCToEPICSDataBlockOffset:=26+10);

        //********************************************
        // Device name: HCB-DogSh:ODH-Area
        // Device type: ODH_Area
        //********************************************

      "DEV_HCB-DogSh:ODH-Area_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=1,
      PLCToEPICSDataBlockOffset:=27+10);

        //********************************************
        // Device name: CTLG-CS:ODH-O2iM-20
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CTLG-CS:ODH-O2iM-20_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=28+10);

        //********************************************
        // Device name: CTLG-CS:ODH-O2iM-21
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CTLG-CS:ODH-O2iM-21_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=31+10);

        //********************************************
        // Device name: CTLG-CS:ODH-O2iM-22
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CTLG-CS:ODH-O2iM-22_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=34+10);

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-13
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-13_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=37+10);

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-14
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-14_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=40+10);

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-15
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-15_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=43+10);

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-16
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-16_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=46+10);

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-17
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-17_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=49+10);

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-18
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-18_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=52+10);

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-19
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-19_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=55+10);

        //********************************************
        // Device name: HCB-ACH:ODH-O2iM-1
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-ACH:ODH-O2iM-1_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=58+10);

        //********************************************
        // Device name: HCB-ACH:ODH-O2iM-2
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-ACH:ODH-O2iM-2_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=61+10);

        //********************************************
        // Device name: HCB-ACH:ODH-O2iM-3
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-ACH:ODH-O2iM-3_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=64+10);

        //********************************************
        // Device name: HCB-ACH:ODH-O2iM-4
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-ACH:ODH-O2iM-4_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=67+10);

        //********************************************
        // Device name: HCB-ACH:ODH-O2iM-5
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-ACH:ODH-O2iM-5_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=70+10);

        //********************************************
        // Device name: HCB-DogSh:ODH-O2iM-12
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-DogSh:ODH-O2iM-12_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=73+10);

        //********************************************
        // Device name: HCB-HPGS:ODH-O2iM-10
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-HPGS:ODH-O2iM-10_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=76+10);

        //********************************************
        // Device name: HCB-HPGS:ODH-O2iM-11
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-HPGS:ODH-O2iM-11_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=79+10);

        //********************************************
        // Device name: HCB-TCH:ODH-O2iM-6
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-TCH:ODH-O2iM-6_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=82+10);

        //********************************************
        // Device name: HCB-TCH:ODH-O2iM-7
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-TCH:ODH-O2iM-7_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=85+10);

        //********************************************
        // Device name: HCB-TCH:ODH-O2iM-8
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-TCH:ODH-O2iM-8_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=88+10);

        //********************************************
        // Device name: HCB-TCH:ODH-O2iM-9
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-TCH:ODH-O2iM-9_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=3,
      PLCToEPICSDataBlockOffset:=91+10);

        //********************************************
        // Device name: CXB-CXH:ODH-RIO-2
        // Device type: ODH_Rack
        //********************************************

      "DEV_CXB-CXH:ODH-RIO-2_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=1,
      PLCToEPICSDataBlockOffset:=94+10);

        //********************************************
        // Device name: HCB-ACH:ODH-RIO-1
        // Device type: ODH_Rack
        //********************************************

      "DEV_HCB-ACH:ODH-RIO-1_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=1,
      PLCToEPICSDataBlockOffset:=95+10);

        //********************************************
        // Device name: TS2-020Row:CnPw-U-001
        // Device type: ODH_Rack
        //********************************************

      "DEV_TS2-020Row:CnPw-U-001_iDB" (EPICSToPLCLength:=0,
      EPICSToPLCDataBlockOffset:=0+10,
      PLCToEPICSLength:=1,
      PLCToEPICSDataBlockOffset:=96+10);
END_FUNCTION
DATA_BLOCK "EPICS_DebuggerResult"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
   VAR 
      EPICS_Debugger_Checksum : Array[0..7] of Byte;   // Current TIA Portal Software Hash including PLC logic (this is not the EPICS IOC Hash)
      EPICS_Debugger_UtilitiesCall : String;   // PLCFactory Utilities call status
      EPICS_Debugger_DeviceCalls : String;   // PLCFactory DeviceCalls status
      EPICS_Debugger_IOCHash : String;   // EPICS IOC Hash vs. PLCFactory Hash
      EPICS_Debugger_ModBusHeartBeat : String;   // EPICS IOC Modbus (IOC->PLC) communication status
      EPICS_Debugger_S7Connection : String;   // EPICS IOC S7 TCP (PLC->IOC) communication status
      EPICS_Debugger_EPICS_GeneralState : String;   // Main status of the EPICS IOC communication
      EPICS_S7Port : Int;   // Actual TCP port that has been opened by the PLC
      EPICS_ModbusPort : Int;   // Actual ModBusTCP port that has been opened by the PLC
      EPICS_PLC_EthernetInterface : UInt;   // The currently used HW Identifer of the Ethernet Port on the PLC dedicated to EPICS
      EPICS_CommunicationOK : Bool;   // Overall EPICS communication is OK
   END_VAR

BEGIN

END_DATA_BLOCK
FUNCTION_BLOCK "EPICS_DebuggerFB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR 
      GetChecksum_Instance {OriginalPartName := 'GetChecksum_FB_807_S71500'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : GetChecksum;
      execute { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      scope { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UInt := 1;
      busy { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      done { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      memErrStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      CheckUtilitiesTON {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : TON_TIME;
      UtilSquareErrorTON { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      CheckUtilitiesTON2 {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : TON_TIME;
      UtilSquareErrorTON2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      ModBus_TON {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : TON_TIME;
      ModBus_wordsave { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
   END_VAR
   VAR DB_SPECIFIC
      Helper_String { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;
      Helper_String_Array { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} AT Helper_String : Struct
         String_Maximal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Byte;
         String_Actual { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Byte;
         StringValueArray { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..15] of Byte;
      END_STRUCT;
   END_VAR
   VAR 
      S7ConnTON {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : TON_TIME;
   END_VAR

   VAR_TEMP 
      AllOK { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      i : Int;
      ModBusOK : Bool;
      S7OK : Bool;
   END_VAR


BEGIN
	//Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2020 by European Spallation Source, Lund
	//This block was generated by PLCFactory
	//Description: This FB checks the EPICS configuration and outputs the result into EPICS_DebuggerResult.

	//DO NOT Modify this block!!!

	//AllOK will be evaluated in this code and passed to the EPICS_CommunicationOK signal that can be used by the PLC logic
	#AllOK := TRUE;

	#GetChecksum_Instance(Scope:=#scope,
	                      Done=>#done,
	                      Busy=>#busy,
	                      Error=>#error,
	                      Status=>#memErrStatus,
	                      Checksum:="EPICS_DebuggerResult".EPICS_Debugger_Checksum);


	#CheckUtilitiesTON(IN:="Utilities".Square_100ms,
	                   PT:=T#200ms,
	                   Q=>#UtilSquareErrorTON);

	#CheckUtilitiesTON2(IN := NOT "Utilities".Square_100ms,
	                   PT := T#200ms,
	                   Q => #UtilSquareErrorTON2);


	#ModBus_TON(IN := #ModBus_wordsave = "EPICSToPLC"."Word"[2],
	            PT := T#5s);


	IF ("Utilities".AlwaysOn = FALSE) THEN
	    "EPICS_DebuggerResult".#EPICS_Debugger_UtilitiesCall := 'ERROR: FunctionBlock: "_UilitiesFB" is called with a wrong InstanceDB. Call it with the existing iDB named: "Utilities" AND check if the System Memory bits and the System Clock byte is enabled!';
         #AllOK := FALSE;
	ELSE
	    IF (#UtilSquareErrorTON OR #UtilSquareErrorTON2) THEN
	        "EPICS_DebuggerResult".#EPICS_Debugger_UtilitiesCall := 'ERROR: FunctionBlock: "_UilitiesFB" is called with a wrong InstanceDB. Call it with the existing iDB named: "Utilities" AND check if the System Memory bits and the System Clock byte is enabled!';
             #AllOK := FALSE;
	    ELSE
	        "EPICS_DebuggerResult".#EPICS_Debugger_UtilitiesCall := 'OK: EPICS Utilities works as expected.';
	        
	    END_IF;
	END_IF;
	    
	IF ("Utilities".EPICS_Device_calls_precessed) THEN
	    "EPICS_DebuggerResult".#EPICS_Debugger_DeviceCalls := 'OK: "EPICS_device_calls" is called as expected.';
	ELSE
	    "EPICS_DebuggerResult".#EPICS_Debugger_DeviceCalls := 'ERROR: "EPICS_device_calls" is not called in OB1!';
         #AllOK := FALSE;
	END_IF;
	    
	IF (("EPICSToPLC"."Word"[0] = "PLCToEPICS"."Word"[0]) AND ("EPICSToPLC"."Word"[1] = "PLCToEPICS"."Word"[1])) THEN
	    "EPICS_DebuggerResult".#EPICS_Debugger_IOCHash := 'OK: IOC and PLC hash are equal.';
	ELSE    
	    "EPICS_DebuggerResult".#EPICS_Debugger_IOCHash := 'ERROR: IOC and PLC hash are NOT equal!';
         #AllOK := FALSE;
	END_IF;

	IF (#ModBus_TON.Q) THEN
	    "EPICS_DebuggerResult".#EPICS_Debugger_ModBusHeartBeat := 'ERROR: The IOC is not sending any HeartBeat via ModBus!';
         #AllOK := FALSE;
	    #ModBusOK := FALSE;
	ELSE
	    "EPICS_DebuggerResult".#EPICS_Debugger_ModBusHeartBeat := 'OK: ModBus HeartBeat is received as expected.';
	    #ModBusOK := TRUE;
	END_IF;

	#S7ConnTON(IN := NOT "_CommsPLC_EPICS_DB".SendDone, PT := T#3s);

	IF ("_CommsPLC_EPICS_DB".BytesToSend > 0) THEN
	    
	    IF (#S7ConnTON.Q) THEN
	        "EPICS_DebuggerResult".EPICS_Debugger_S7Connection := 'ERROR: EPICS S7 connection can not send Status variables!';
	        #S7OK := FALSE;
             #AllOK := FALSE;
	    ELSE
	        "EPICS_DebuggerResult".EPICS_Debugger_S7Connection := 'OK: EPICS S7 works as expected.';
	        #S7OK := TRUE;
	        
	    END_IF;
	ELSE
	    "EPICS_DebuggerResult".EPICS_Debugger_S7Connection := 'OK: EPICS S7 disabled, there is no Status variable to send.';
	    #S7OK := TRUE;
	END_IF;

	IF (#ModBusOK AND #S7OK) THEN
	    "EPICS_DebuggerResult".EPICS_Debugger_EPICS_GeneralState := 'OK. EPICS IOC communication is ONLINE.';
	END_IF;

	IF (#ModBusOK AND NOT #S7OK) THEN
	    "EPICS_DebuggerResult".EPICS_Debugger_EPICS_GeneralState := 'ERROR. ModBus seems to be working but S7 TCP is blocked. Try to check your PLC router IP.';
         #AllOK := FALSE;
	END_IF;

	IF (NOT #ModBusOK AND #S7OK) THEN
	    "EPICS_DebuggerResult".EPICS_Debugger_EPICS_GeneralState := 'ERROR. ModBus seems to be offline. Waiting for IOC to finish connecting to the PLC.';
         #AllOK := FALSE;
	END_IF;

	IF ( NOT #ModBusOK AND NOT #S7OK) THEN
	    "EPICS_DebuggerResult".EPICS_Debugger_EPICS_GeneralState := 'ERROR. Both ModBus and S7 TCP seems to be offline. Check if your IOC is running and if it is connected to the right PLC interface. Your HardwareID comes from CCDB!';
         #AllOK := FALSE;
	END_IF;

	"EPICS_DebuggerResult".EPICS_ModbusPort := "_CommsPLC_EPICS_DB".MBPort;
	"EPICS_DebuggerResult".EPICS_S7Port := "_CommsPLC_EPICS_DB".S7Port;
	"EPICS_DebuggerResult".EPICS_PLC_EthernetInterface :=  "_CommsPLC_EPICS_DB".InterfaceID;

	#ModBus_wordsave := "EPICSToPLC"."Word"[2];

	//Put the Overall result to the Globl DB
	"EPICS_DebuggerResult".EPICS_CommunicationOK := #AllOK;


END_FUNCTION_BLOCK
DATA_BLOCK "EPICS_DebuggerFB_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"EPICS_DebuggerFB"

BEGIN

END_DATA_BLOCK
ORGANIZATION_BLOCK "EPICS_DebuggerOB"
TITLE = "Main Program Sweep (Cycle)"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	//Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2020 by European Spallation Source, Lund
	//This block was generated by PLCFactory
	//Description: This OB is a cyclic OB called in every PLC cycle and EPICS_DebuggerFB checks the EPICS configuration.

	//DO NOT Modify this block!!!
	"EPICS_DebuggerFB_iDB"();


END_ORGANIZATION_BLOCK
DATA_BLOCK "EPICSToPLC"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
//########## EPICS->PLC datablock ##########
   STRUCT
      "Word" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Array[0..9] of Word;
   END_STRUCT;

BEGIN

END_DATA_BLOCK

DATA_BLOCK "PLCToEPICS"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
NON_RETAIN
//########## PLC->EPICS datablock ##########
   STRUCT
      "Word" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; } : Array[0..106] of Word;
   END_STRUCT;

BEGIN

END_DATA_BLOCK

FUNCTION "_CommsEPICS" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_TEMP
      PLC_Hash : DInt;
   END_VAR

BEGIN
	//Heartbeat PLC->EPICS
	IF "Utilities".Pulse_1s THEN
	    "PLCToEPICS"."Word"[2] := "PLCToEPICS"."Word"[2] + 1;
	    IF "PLCToEPICS"."Word"[2] >= 32000 THEN
	        "PLCToEPICS"."Word"[2] := 0;
	    END_IF;
	END_IF;

	// PLC Factory commit ID: N/A
	// PLC Hash (Generated by PLC Factory)
	#PLC_Hash := DINT#-165088913;

	// Send the PLC Hash to the EPICS IOC
	"PLCToEPICS"."Word"[1] := DINT_TO_WORD(#PLC_Hash);
	"PLCToEPICS"."Word"[0] := DINT_TO_WORD(SHR(IN := #PLC_Hash, N := 16));

	// Call the comms block to provide PLC<->EPICS comms
	"_CommsPLC_EPICS_DB"(Enable         := "Utilities".AlwaysOn,
	                     SendTrigger    := "Utilities".Pulse_200ms,
	                     BytesToSend    := 214,
	                     InterfaceID    := 72,
	                     S7ConnectionID := 256,
	                     MBConnectionID := 255,
	                     S7Port         := 2000,
	                     MBPort         := 502,
	                     PLCToEPICSData := "PLCToEPICS"."Word",
	                     EPICSToPLCData := "EPICSToPLC"."Word");

END_FUNCTION
