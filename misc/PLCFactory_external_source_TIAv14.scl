FUNCTION_BLOCK "DEVTYPE_PLC"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_INPUT
      "SW_Checksum" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DWORD;   //EPICS Status variable: SW_Checksum
      "Text_Checksum" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DWORD;   //EPICS Status variable: Text_Checksum
      "CPU_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: CPU_Connected
      "CPU_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: CPU_Status
      "RIO1_IM_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_IM_Connected
      "RIO1_DI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI1_Connected
      "RIO1_DI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI2_Connected
      "RIO1_DI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI3_Connected
      "RIO1_DI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI4_Connected
      "RIO1_DI5_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI5_Connected
      "RIO1_AI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI1_Connected
      "RIO1_AI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI2_Connected
      "RIO1_AI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI3_Connected
      "RIO1_AI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI4_Connected
      "RIO1_DO1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO1_Connected
      "RIO1_DO2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO2_Connected
      "RIO1_DO3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO3_Connected
      "RIO1_SvrMod_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_SvrMod_Connected
      "RIO1_IM_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_IM_Status
      "RIO1_DI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI1_Status
      "RIO1_DI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI2_Status
      "RIO1_DI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI3_Status
      "RIO1_DI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI4_Status
      "RIO1_DI5_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI5_Status
      "RIO1_AI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI1_Status
      "RIO1_AI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI2_Status
      "RIO1_AI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI3_Status
      "RIO1_AI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI4_Status
      "RIO1_DO1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO1_Status
      "RIO1_DO2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO2_Status
      "RIO1_DO3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO3_Status
      "RIO1_SvrMod_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_SvrMod_Status
      "RIO2_IM_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_IM_Connected
      "RIO2_DI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI1_Connected
      "RIO2_DI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI2_Connected
      "RIO2_DI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI3_Connected
      "RIO2_DI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI4_Connected
      "RIO2_DI5_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI5_Connected
      "RIO2_AI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI1_Connected
      "RIO2_AI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI2_Connected
      "RIO2_AI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI3_Connected
      "RIO2_AI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI4_Connected
      "RIO2_DO1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO1_Connected
      "RIO2_DO2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO2_Connected
      "RIO2_DO3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO3_Connected
      "RIO2_SvrMod_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_SvrMod_Connected
      "RIO2_IM_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_IM_Status
      "RIO2_DI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI1_Status
      "RIO2_DI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI2_Status
      "RIO2_DI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI3_Status
      "RIO2_DI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI4_Status
      "RIO2_DI5_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI5_Status
      "RIO2_AI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI1_Status
      "RIO2_AI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI2_Status
      "RIO2_AI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI3_Status
      "RIO2_AI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI4_Status
      "RIO2_DO1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO1_Status
      "RIO2_DO2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO2_Status
      "RIO2_DO3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO3_Status
      "RIO2_SvrMod_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_SvrMod_Status
      "RIO3_IM_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_IM_Connected
      "RIO3_DI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI1_Connected
      "RIO3_DI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI2_Connected
      "RIO3_DI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI3_Connected
      "RIO3_DI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI4_Connected
      "RIO3_DI5_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI5_Connected
      "RIO3_AI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI1_Connected
      "RIO3_AI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI2_Connected
      "RIO3_AI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI3_Connected
      "RIO3_AI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI4_Connected
      "RIO3_DO1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO1_Connected
      "RIO3_DO2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO2_Connected
      "RIO3_DO3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO3_Connected
      "RIO3_SvrMod_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_SvrMod_Connected
      "RIO3_IM_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_IM_Status
      "RIO3_DI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI1_Status
      "RIO3_DI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI2_Status
      "RIO3_DI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI3_Status
      "RIO3_DI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI4_Status
      "RIO3_DI5_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI5_Status
      "RIO3_AI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI1_Status
      "RIO3_AI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI2_Status
      "RIO3_AI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI3_Status
      "RIO3_AI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI4_Status
      "RIO3_DO1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO1_Status
      "RIO3_DO2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO2_Status
      "RIO3_DO3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO3_Status
      "RIO3_SvrMod_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_SvrMod_Status
   END_VAR
   VAR_OUTPUT
      DEVICE_PARAM_OK { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Bool;
   END_VAR
   VAR_IN_OUT
   END_VAR
   VAR
      StatusReg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Array[0..9] of Word;
      CommandReg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Array[0..0] of Word;
   END_VAR
   Var DB_SPECIFIC
      MyWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Word;
      MyBytesinWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyWord : Array[0..1] of Byte;
      MyBoolsinWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyWord : Array[0..15] of Bool;
      MyDInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DInt;
      MyWordsinDint { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyDInt : Array[0..1] of Word;
      MyReal { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Real;
      MyWordsinReal { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyReal : Array[0..1] of Word;
      MyInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Int;
      MyWordinInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyInt : Word;
      MyDWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DWord;
      MyWordsinDWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyDWord : Array[0..1] of Word;
      MyTime { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Time;
      MyWordsinTime { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyTime : Array[0..1] of Word;
   END_VAR
   VAR_TEMP
      HashModbus : DInt;
      HashIFA : DInt;
      HashTIAMap : DInt;
   END_VAR
    //Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2018 by European Spallation Source, Lund
    //This block was generated by PLCFactory, please don't change it MANUALLY!
    //Input File Name: KG-GTA_ODH-PLC-01-template-IFA-20181026160338.ifa
    //According to HASH: 718980072
    //Device type: PLC
    //Generated: 20181026160341
    //Description: This function does the variable mapping for a device. All device-variable will be linked to an interface variable defined in this block.

    //********************************************
    //****************HASH check******************
    //********************************************


    #MyWordsinDint[0] := "EPICSToPLC"."Word"[0];
    #MyWordsinDint[1] := "EPICSToPLC"."Word"[1];
    #HashModbus := #MyDInt; //Hash from EPICS/ModbusTCP

    #HashIFA := 718980072; //Hash from Interface Factory as a constant

    #MyWordsinDint[0] := "PLCToEPICS"."Word"[0];
    #MyWordsinDint[1] := "PLCToEPICS"."Word"[1];
    #HashTIAMap := #MyDInt; //Hash from PLCFactory TIA Map


    IF ((#HashIFA = #HashModbus) AND (#HashModbus = #HashTIAMap)) THEN //Check CRCs
        #DEVICE_PARAM_OK := TRUE;
       //########################### ODH Detection System   ##############################
       //###########################
       //STATUS BLOCK
       //###########################

    //********************************************
    //*************STATUS VARIABLES***************
    //********************************************


       #MyDWord := #"SW_Checksum";
       #StatusReg[0] := #MyWordsinDWord[0];
       #StatusReg[1] := #MyWordsinDWord[1];

       #MyDWord := #"Text_Checksum";
       //################################
       //CPU modules
       #StatusReg[2] := #MyWordsinDWord[0];
       #StatusReg[3] := #MyWordsinDWord[1];

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"CPU_Connected";    //EPICSName: CPU_Connected
       #MyBoolsinWord[9] := #"CPU_Status";    //EPICSName: CPU_Status
       //################################
       //RIO1 Connection
       #MyBoolsinWord[10] := #"RIO1_IM_Connected";    //EPICSName: RIO1_IM_Connected
       #MyBoolsinWord[11] := #"RIO1_DI1_Connected";    //EPICSName: RIO1_DI1_Connected
       #MyBoolsinWord[12] := #"RIO1_DI2_Connected";    //EPICSName: RIO1_DI2_Connected
       #MyBoolsinWord[13] := #"RIO1_DI3_Connected";    //EPICSName: RIO1_DI3_Connected
       #MyBoolsinWord[14] := #"RIO1_DI4_Connected";    //EPICSName: RIO1_DI4_Connected
       #MyBoolsinWord[15] := #"RIO1_DI5_Connected";    //EPICSName: RIO1_DI5_Connected
       #MyBoolsinWord[0] := #"RIO1_AI1_Connected";    //EPICSName: RIO1_AI1_Connected
       #MyBoolsinWord[1] := #"RIO1_AI2_Connected";    //EPICSName: RIO1_AI2_Connected
       #MyBoolsinWord[2] := #"RIO1_AI3_Connected";    //EPICSName: RIO1_AI3_Connected
       #MyBoolsinWord[3] := #"RIO1_AI4_Connected";    //EPICSName: RIO1_AI4_Connected
       #MyBoolsinWord[4] := #"RIO1_DO1_Connected";    //EPICSName: RIO1_DO1_Connected
       #MyBoolsinWord[5] := #"RIO1_DO2_Connected";    //EPICSName: RIO1_DO2_Connected
       #MyBoolsinWord[6] := #"RIO1_DO3_Connected";    //EPICSName: RIO1_DO3_Connected
       #MyBoolsinWord[7] := #"RIO1_SvrMod_Connected";    //EPICSName: RIO1_SvrMod_Connected
       //RIO1 Status
       #StatusReg[4] := #MyWord;

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"RIO1_IM_Status";    //EPICSName: RIO1_IM_Status
       #MyBoolsinWord[9] := #"RIO1_DI1_Status";    //EPICSName: RIO1_DI1_Status
       #MyBoolsinWord[10] := #"RIO1_DI2_Status";    //EPICSName: RIO1_DI2_Status
       #MyBoolsinWord[11] := #"RIO1_DI3_Status";    //EPICSName: RIO1_DI3_Status
       #MyBoolsinWord[12] := #"RIO1_DI4_Status";    //EPICSName: RIO1_DI4_Status
       #MyBoolsinWord[13] := #"RIO1_DI5_Status";    //EPICSName: RIO1_DI5_Status
       #MyBoolsinWord[14] := #"RIO1_AI1_Status";    //EPICSName: RIO1_AI1_Status
       #MyBoolsinWord[15] := #"RIO1_AI2_Status";    //EPICSName: RIO1_AI2_Status
       #MyBoolsinWord[0] := #"RIO1_AI3_Status";    //EPICSName: RIO1_AI3_Status
       #MyBoolsinWord[1] := #"RIO1_AI4_Status";    //EPICSName: RIO1_AI4_Status
       #MyBoolsinWord[2] := #"RIO1_DO1_Status";    //EPICSName: RIO1_DO1_Status
       #MyBoolsinWord[3] := #"RIO1_DO2_Status";    //EPICSName: RIO1_DO2_Status
       #MyBoolsinWord[4] := #"RIO1_DO3_Status";    //EPICSName: RIO1_DO3_Status
       #MyBoolsinWord[5] := #"RIO1_SvrMod_Status";    //EPICSName: RIO1_SvrMod_Status
       //################################
       //RIO2 Connection
       #MyBoolsinWord[6] := #"RIO2_IM_Connected";    //EPICSName: RIO2_IM_Connected
       #MyBoolsinWord[7] := #"RIO2_DI1_Connected";    //EPICSName: RIO2_DI1_Connected
       #StatusReg[5] := #MyWord;

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"RIO2_DI2_Connected";    //EPICSName: RIO2_DI2_Connected
       #MyBoolsinWord[9] := #"RIO2_DI3_Connected";    //EPICSName: RIO2_DI3_Connected
       #MyBoolsinWord[10] := #"RIO2_DI4_Connected";    //EPICSName: RIO2_DI4_Connected
       #MyBoolsinWord[11] := #"RIO2_DI5_Connected";    //EPICSName: RIO2_DI5_Connected
       #MyBoolsinWord[12] := #"RIO2_AI1_Connected";    //EPICSName: RIO2_AI1_Connected
       #MyBoolsinWord[13] := #"RIO2_AI2_Connected";    //EPICSName: RIO2_AI2_Connected
       #MyBoolsinWord[14] := #"RIO2_AI3_Connected";    //EPICSName: RIO2_AI3_Connected
       #MyBoolsinWord[15] := #"RIO2_AI4_Connected";    //EPICSName: RIO2_AI4_Connected
       #MyBoolsinWord[0] := #"RIO2_DO1_Connected";    //EPICSName: RIO2_DO1_Connected
       #MyBoolsinWord[1] := #"RIO2_DO2_Connected";    //EPICSName: RIO2_DO2_Connected
       #MyBoolsinWord[2] := #"RIO2_DO3_Connected";    //EPICSName: RIO2_DO3_Connected
       #MyBoolsinWord[3] := #"RIO2_SvrMod_Connected";    //EPICSName: RIO2_SvrMod_Connected
       //RIO2 Status
       #MyBoolsinWord[4] := #"RIO2_IM_Status";    //EPICSName: RIO2_IM_Status
       #MyBoolsinWord[5] := #"RIO2_DI1_Status";    //EPICSName: RIO2_DI1_Status
       #MyBoolsinWord[6] := #"RIO2_DI2_Status";    //EPICSName: RIO2_DI2_Status
       #MyBoolsinWord[7] := #"RIO2_DI3_Status";    //EPICSName: RIO2_DI3_Status
       #StatusReg[6] := #MyWord;

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"RIO2_DI4_Status";    //EPICSName: RIO2_DI4_Status
       #MyBoolsinWord[9] := #"RIO2_DI5_Status";    //EPICSName: RIO2_DI5_Status
       #MyBoolsinWord[10] := #"RIO2_AI1_Status";    //EPICSName: RIO2_AI1_Status
       #MyBoolsinWord[11] := #"RIO2_AI2_Status";    //EPICSName: RIO2_AI2_Status
       #MyBoolsinWord[12] := #"RIO2_AI3_Status";    //EPICSName: RIO2_AI3_Status
       #MyBoolsinWord[13] := #"RIO2_AI4_Status";    //EPICSName: RIO2_AI4_Status
       #MyBoolsinWord[14] := #"RIO2_DO1_Status";    //EPICSName: RIO2_DO1_Status
       #MyBoolsinWord[15] := #"RIO2_DO2_Status";    //EPICSName: RIO2_DO2_Status
       #MyBoolsinWord[0] := #"RIO2_DO3_Status";    //EPICSName: RIO2_DO3_Status
       #MyBoolsinWord[1] := #"RIO2_SvrMod_Status";    //EPICSName: RIO2_SvrMod_Status
       //################################
       //RIO3 Connection
       #MyBoolsinWord[2] := #"RIO3_IM_Connected";    //EPICSName: RIO3_IM_Connected
       #MyBoolsinWord[3] := #"RIO3_DI1_Connected";    //EPICSName: RIO3_DI1_Connected
       #MyBoolsinWord[4] := #"RIO3_DI2_Connected";    //EPICSName: RIO3_DI2_Connected
       #MyBoolsinWord[5] := #"RIO3_DI3_Connected";    //EPICSName: RIO3_DI3_Connected
       #MyBoolsinWord[6] := #"RIO3_DI4_Connected";    //EPICSName: RIO3_DI4_Connected
       #MyBoolsinWord[7] := #"RIO3_DI5_Connected";    //EPICSName: RIO3_DI5_Connected
       #StatusReg[7] := #MyWord;

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"RIO3_AI1_Connected";    //EPICSName: RIO3_AI1_Connected
       #MyBoolsinWord[9] := #"RIO3_AI2_Connected";    //EPICSName: RIO3_AI2_Connected
       #MyBoolsinWord[10] := #"RIO3_AI3_Connected";    //EPICSName: RIO3_AI3_Connected
       #MyBoolsinWord[11] := #"RIO3_AI4_Connected";    //EPICSName: RIO3_AI4_Connected
       #MyBoolsinWord[12] := #"RIO3_DO1_Connected";    //EPICSName: RIO3_DO1_Connected
       #MyBoolsinWord[13] := #"RIO3_DO2_Connected";    //EPICSName: RIO3_DO2_Connected
       #MyBoolsinWord[14] := #"RIO3_DO3_Connected";    //EPICSName: RIO3_DO3_Connected
       #MyBoolsinWord[15] := #"RIO3_SvrMod_Connected";    //EPICSName: RIO3_SvrMod_Connected
       //RIO3 Status
       #MyBoolsinWord[0] := #"RIO3_IM_Status";    //EPICSName: RIO3_IM_Status
       #MyBoolsinWord[1] := #"RIO3_DI1_Status";    //EPICSName: RIO3_DI1_Status
       #MyBoolsinWord[2] := #"RIO3_DI2_Status";    //EPICSName: RIO3_DI2_Status
       #MyBoolsinWord[3] := #"RIO3_DI3_Status";    //EPICSName: RIO3_DI3_Status
       #MyBoolsinWord[4] := #"RIO3_DI4_Status";    //EPICSName: RIO3_DI4_Status
       #MyBoolsinWord[5] := #"RIO3_DI5_Status";    //EPICSName: RIO3_DI5_Status
       #MyBoolsinWord[6] := #"RIO3_AI1_Status";    //EPICSName: RIO3_AI1_Status
       #MyBoolsinWord[7] := #"RIO3_AI2_Status";    //EPICSName: RIO3_AI2_Status
       #StatusReg[8] := #MyWord;

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"RIO3_AI3_Status";    //EPICSName: RIO3_AI3_Status
       #MyBoolsinWord[9] := #"RIO3_AI4_Status";    //EPICSName: RIO3_AI4_Status
       #MyBoolsinWord[10] := #"RIO3_DO1_Status";    //EPICSName: RIO3_DO1_Status
       #MyBoolsinWord[11] := #"RIO3_DO2_Status";    //EPICSName: RIO3_DO2_Status
       #MyBoolsinWord[12] := #"RIO3_DO3_Status";    //EPICSName: RIO3_DO3_Status
       #MyBoolsinWord[13] := #"RIO3_SvrMod_Status";    //EPICSName: RIO3_SvrMod_Status
       #StatusReg[9] := #MyWord;
    Else
       #DEVICE_PARAM_OK := FALSE; //Invalid Hash
    END_IF;
END_FUNCTION_BLOCK
FUNCTION_BLOCK "DEVTYPE_ODH_Area"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_INPUT
      "Alarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Alarm
      "WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
   END_VAR
   VAR_OUTPUT
      DEVICE_PARAM_OK { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Bool;
   END_VAR
   VAR_IN_OUT
   END_VAR
   VAR
      StatusReg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Array[0..0] of Word;
      CommandReg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Array[0..0] of Word;
   END_VAR
   Var DB_SPECIFIC
      MyWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Word;
      MyBytesinWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyWord : Array[0..1] of Byte;
      MyBoolsinWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyWord : Array[0..15] of Bool;
      MyDInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DInt;
      MyWordsinDint { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyDInt : Array[0..1] of Word;
      MyReal { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Real;
      MyWordsinReal { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyReal : Array[0..1] of Word;
      MyInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Int;
      MyWordinInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyInt : Word;
      MyDWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DWord;
      MyWordsinDWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyDWord : Array[0..1] of Word;
      MyTime { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Time;
      MyWordsinTime { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyTime : Array[0..1] of Word;
   END_VAR
   VAR_TEMP
      HashModbus : DInt;
      HashIFA : DInt;
      HashTIAMap : DInt;
   END_VAR
    //Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2018 by European Spallation Source, Lund
    //This block was generated by PLCFactory, please don't change it MANUALLY!
    //Input File Name: KG-GTA_ODH-PLC-01-template-IFA-20181026160338.ifa
    //According to HASH: 718980072
    //Device type: ODH_Area
    //Generated: 20181026160341
    //Description: This function does the variable mapping for a device. All device-variable will be linked to an interface variable defined in this block.

    //********************************************
    //****************HASH check******************
    //********************************************


    #MyWordsinDint[0] := "EPICSToPLC"."Word"[0];
    #MyWordsinDint[1] := "EPICSToPLC"."Word"[1];
    #HashModbus := #MyDInt; //Hash from EPICS/ModbusTCP

    #HashIFA := 718980072; //Hash from Interface Factory as a constant

    #MyWordsinDint[0] := "PLCToEPICS"."Word"[0];
    #MyWordsinDint[1] := "PLCToEPICS"."Word"[1];
    #HashTIAMap := #MyDInt; //Hash from PLCFactory TIA Map


    IF ((#HashIFA = #HashModbus) AND (#HashModbus = #HashTIAMap)) THEN //Check CRCs
        #DEVICE_PARAM_OK := TRUE;
       //########################### ODH Detection System   ##############################
       //###########################
       //STATUS BLOCK
       //###########################

    //********************************************
    //*************STATUS VARIABLES***************
    //********************************************


       #MyWord := W#0;
       #MyBoolsinWord[8] := #"Alarm";    //EPICSName: Alarm
       #MyBoolsinWord[9] := #"WarmUp";    //EPICSName: WarmUp
       #MyBoolsinWord[10] := #"ConnLost";    //EPICSName: ConnLost
       #StatusReg[0] := #MyWord;
    Else
       #DEVICE_PARAM_OK := FALSE; //Invalid Hash
    END_IF;
END_FUNCTION_BLOCK
FUNCTION_BLOCK "DEVTYPE_ODH_O2iM"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_INPUT
      "O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
   END_VAR
   VAR_OUTPUT
      DEVICE_PARAM_OK { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Bool;
   END_VAR
   VAR_IN_OUT
   END_VAR
   VAR
      StatusReg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Array[0..2] of Word;
      CommandReg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Array[0..0] of Word;
   END_VAR
   Var DB_SPECIFIC
      MyWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Word;
      MyBytesinWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyWord : Array[0..1] of Byte;
      MyBoolsinWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyWord : Array[0..15] of Bool;
      MyDInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DInt;
      MyWordsinDint { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyDInt : Array[0..1] of Word;
      MyReal { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Real;
      MyWordsinReal { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyReal : Array[0..1] of Word;
      MyInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Int;
      MyWordinInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyInt : Word;
      MyDWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DWord;
      MyWordsinDWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyDWord : Array[0..1] of Word;
      MyTime { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Time;
      MyWordsinTime { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyTime : Array[0..1] of Word;
   END_VAR
   VAR_TEMP
      HashModbus : DInt;
      HashIFA : DInt;
      HashTIAMap : DInt;
   END_VAR
    //Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2018 by European Spallation Source, Lund
    //This block was generated by PLCFactory, please don't change it MANUALLY!
    //Input File Name: KG-GTA_ODH-PLC-01-template-IFA-20181026160338.ifa
    //According to HASH: 718980072
    //Device type: ODH_O2iM
    //Generated: 20181026160341
    //Description: This function does the variable mapping for a device. All device-variable will be linked to an interface variable defined in this block.

    //********************************************
    //****************HASH check******************
    //********************************************


    #MyWordsinDint[0] := "EPICSToPLC"."Word"[0];
    #MyWordsinDint[1] := "EPICSToPLC"."Word"[1];
    #HashModbus := #MyDInt; //Hash from EPICS/ModbusTCP

    #HashIFA := 718980072; //Hash from Interface Factory as a constant

    #MyWordsinDint[0] := "PLCToEPICS"."Word"[0];
    #MyWordsinDint[1] := "PLCToEPICS"."Word"[1];
    #HashTIAMap := #MyDInt; //Hash from PLCFactory TIA Map


    IF ((#HashIFA = #HashModbus) AND (#HashModbus = #HashTIAMap)) THEN //Check CRCs
        #DEVICE_PARAM_OK := TRUE;
       //########################### ODH Detection System   ##############################
       //###########################
       //STATUS BLOCK
       //###########################

    //********************************************
    //*************STATUS VARIABLES***************
    //********************************************


       #MyReal := #"O2Level";
       #StatusReg[0] := #MyWordsinReal[0];
       #StatusReg[1] := #MyWordsinReal[1];

       #MyWord := W#0;
       #MyBoolsinWord[8] := #"ODHAlarm";    //EPICSName: ODHAlarm
       #MyBoolsinWord[9] := #"ODHWarning";    //EPICSName: ODHWarning
       #MyBoolsinWord[10] := #"MonitHealthy";    //EPICSName: MonitHealthy
       #MyBoolsinWord[11] := #"Maint";    //EPICSName: Maint
       #MyBoolsinWord[12] := #"MonitWarning";    //EPICSName: MonitWarning
       #MyBoolsinWord[13] := #"SysOK";    //EPICSName: SysOK
       #MyBoolsinWord[14] := #"WarmUp";    //EPICSName: WarmUp
       #MyBoolsinWord[15] := #"ConnLost";    //EPICSName: ConnLost
       #StatusReg[2] := #MyWord;
    Else
       #DEVICE_PARAM_OK := FALSE; //Invalid Hash
    END_IF;
END_FUNCTION_BLOCK
FUNCTION_BLOCK "DEVTYPE_ODH_Rack"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
   VAR_INPUT
      "SurgeArrOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SurgeArrOK
      "PS24vOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: PS24vOK
      "UPSBatOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBatOK
      "UPS24vOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPS24vOK
      "UPSBuffReady" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBuffReady
      "UPSBatt85" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBatt85
      "UPSAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSAlarm
   END_VAR
   VAR_OUTPUT
      DEVICE_PARAM_OK { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Bool;
   END_VAR
   VAR_IN_OUT
   END_VAR
   VAR
      StatusReg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Array[0..0] of Word;
      CommandReg { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Array[0..0] of Word;
   END_VAR
   Var DB_SPECIFIC
      MyWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Word;
      MyBytesinWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyWord : Array[0..1] of Byte;
      MyBoolsinWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyWord : Array[0..15] of Bool;
      MyDInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DInt;
      MyWordsinDint { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyDInt : Array[0..1] of Word;
      MyReal { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Real;
      MyWordsinReal { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyReal : Array[0..1] of Word;
      MyInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Int;
      MyWordinInt { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyInt : Word;
      MyDWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DWord;
      MyWordsinDWord { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyDWord : Array[0..1] of Word;
      MyTime { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Time;
      MyWordsinTime { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT MyTime : Array[0..1] of Word;
   END_VAR
   VAR_TEMP
      HashModbus : DInt;
      HashIFA : DInt;
      HashTIAMap : DInt;
   END_VAR
    //Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2018 by European Spallation Source, Lund
    //This block was generated by PLCFactory, please don't change it MANUALLY!
    //Input File Name: KG-GTA_ODH-PLC-01-template-IFA-20181026160338.ifa
    //According to HASH: 718980072
    //Device type: ODH_Rack
    //Generated: 20181026160341
    //Description: This function does the variable mapping for a device. All device-variable will be linked to an interface variable defined in this block.

    //********************************************
    //****************HASH check******************
    //********************************************


    #MyWordsinDint[0] := "EPICSToPLC"."Word"[0];
    #MyWordsinDint[1] := "EPICSToPLC"."Word"[1];
    #HashModbus := #MyDInt; //Hash from EPICS/ModbusTCP

    #HashIFA := 718980072; //Hash from Interface Factory as a constant

    #MyWordsinDint[0] := "PLCToEPICS"."Word"[0];
    #MyWordsinDint[1] := "PLCToEPICS"."Word"[1];
    #HashTIAMap := #MyDInt; //Hash from PLCFactory TIA Map


    IF ((#HashIFA = #HashModbus) AND (#HashModbus = #HashTIAMap)) THEN //Check CRCs
        #DEVICE_PARAM_OK := TRUE;
       //########################### ODH Detection System   ##############################
       //###########################
       //STATUS BLOCK
       //###########################

    //********************************************
    //*************STATUS VARIABLES***************
    //********************************************


       #MyWord := W#0;
       #MyBoolsinWord[8] := #"SurgeArrOK";    //EPICSName: SurgeArrOK
       #MyBoolsinWord[9] := #"PS24vOK";    //EPICSName: PS24vOK
       #MyBoolsinWord[10] := #"UPSBatOK";    //EPICSName: UPSBatOK
       #MyBoolsinWord[11] := #"UPS24vOK";    //EPICSName: UPS24vOK
       #MyBoolsinWord[12] := #"UPSBuffReady";    //EPICSName: UPSBuffReady
       #MyBoolsinWord[13] := #"UPSBatt85";    //EPICSName: UPSBatt85
       #MyBoolsinWord[14] := #"UPSAlarm";    //EPICSName: UPSAlarm
       #StatusReg[0] := #MyWord;
    Else
       #DEVICE_PARAM_OK := FALSE; //Invalid Hash
    END_IF;
END_FUNCTION_BLOCK

DATA_BLOCK "DEV_KG-GTA:ODH-PLC-01_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_PLC"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CTLG-CS:ODH-Area_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Area"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-Area_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Area"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-Area_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Area"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CTLG-CS:ODH-O2iM-20_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CTLG-CS:ODH-O2iM-21_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CTLG-CS:ODH-O2iM-22_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-13_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-14_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-15_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-16_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-17_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-18_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-O2iM-19_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-O2iM-1_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-O2iM-2_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-O2iM-3_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-O2iM-4_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-O2iM-5_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-DogSh:ODH-O2iM-12_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-HPGS:ODH-O2iM-10_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-HPGS:ODH-O2iM-11_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-TCH:ODH-O2iM-6_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-TCH:ODH-O2iM-7_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-TCH:ODH-O2iM-8_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-TCH:ODH-O2iM-9_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_O2iM"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_CXB-CXH:ODH-RIO-2_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Rack"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_HCB-ACH:ODH-RIO-1_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Rack"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "DEV_TS2-020Row:CnPw-U-001_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"DEVTYPE_ODH_Rack"
BEGIN
END_DATA_BLOCK

DATA_BLOCK "EPICS_PLC_Tester"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
NON_RETAIN
   STRUCT
      HeartBeat { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : Bool;
      "KG-GTA:ODH-PLC-01_SW_Checksum" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DWORD;   //EPICS Status variable: SW_Checksum
      "KG-GTA:ODH-PLC-01_Text_Checksum" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : DWORD;   //EPICS Status variable: Text_Checksum
      "KG-GTA:ODH-PLC-01_CPU_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: CPU_Connected
      "KG-GTA:ODH-PLC-01_CPU_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: CPU_Status
      "KG-GTA:ODH-PLC-01_RIO1_IM_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_IM_Connected
      "KG-GTA:ODH-PLC-01_RIO1_DI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI1_Connected
      "KG-GTA:ODH-PLC-01_RIO1_DI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI2_Connected
      "KG-GTA:ODH-PLC-01_RIO1_DI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI3_Connected
      "KG-GTA:ODH-PLC-01_RIO1_DI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI4_Connected
      "KG-GTA:ODH-PLC-01_RIO1_DI5_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI5_Connected
      "KG-GTA:ODH-PLC-01_RIO1_AI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI1_Connected
      "KG-GTA:ODH-PLC-01_RIO1_AI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI2_Connected
      "KG-GTA:ODH-PLC-01_RIO1_AI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI3_Connected
      "KG-GTA:ODH-PLC-01_RIO1_AI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI4_Connected
      "KG-GTA:ODH-PLC-01_RIO1_DO1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO1_Connected
      "KG-GTA:ODH-PLC-01_RIO1_DO2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO2_Connected
      "KG-GTA:ODH-PLC-01_RIO1_DO3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO3_Connected
      "KG-GTA:ODH-PLC-01_RIO1_SvrMod_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_SvrMod_Connected
      "KG-GTA:ODH-PLC-01_RIO1_IM_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_IM_Status
      "KG-GTA:ODH-PLC-01_RIO1_DI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI1_Status
      "KG-GTA:ODH-PLC-01_RIO1_DI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI2_Status
      "KG-GTA:ODH-PLC-01_RIO1_DI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI3_Status
      "KG-GTA:ODH-PLC-01_RIO1_DI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI4_Status
      "KG-GTA:ODH-PLC-01_RIO1_DI5_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DI5_Status
      "KG-GTA:ODH-PLC-01_RIO1_AI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI1_Status
      "KG-GTA:ODH-PLC-01_RIO1_AI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI2_Status
      "KG-GTA:ODH-PLC-01_RIO1_AI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI3_Status
      "KG-GTA:ODH-PLC-01_RIO1_AI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_AI4_Status
      "KG-GTA:ODH-PLC-01_RIO1_DO1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO1_Status
      "KG-GTA:ODH-PLC-01_RIO1_DO2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO2_Status
      "KG-GTA:ODH-PLC-01_RIO1_DO3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_DO3_Status
      "KG-GTA:ODH-PLC-01_RIO1_SvrMod_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO1_SvrMod_Status
      "KG-GTA:ODH-PLC-01_RIO2_IM_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_IM_Connected
      "KG-GTA:ODH-PLC-01_RIO2_DI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI1_Connected
      "KG-GTA:ODH-PLC-01_RIO2_DI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI2_Connected
      "KG-GTA:ODH-PLC-01_RIO2_DI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI3_Connected
      "KG-GTA:ODH-PLC-01_RIO2_DI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI4_Connected
      "KG-GTA:ODH-PLC-01_RIO2_DI5_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI5_Connected
      "KG-GTA:ODH-PLC-01_RIO2_AI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI1_Connected
      "KG-GTA:ODH-PLC-01_RIO2_AI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI2_Connected
      "KG-GTA:ODH-PLC-01_RIO2_AI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI3_Connected
      "KG-GTA:ODH-PLC-01_RIO2_AI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI4_Connected
      "KG-GTA:ODH-PLC-01_RIO2_DO1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO1_Connected
      "KG-GTA:ODH-PLC-01_RIO2_DO2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO2_Connected
      "KG-GTA:ODH-PLC-01_RIO2_DO3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO3_Connected
      "KG-GTA:ODH-PLC-01_RIO2_SvrMod_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_SvrMod_Connected
      "KG-GTA:ODH-PLC-01_RIO2_IM_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_IM_Status
      "KG-GTA:ODH-PLC-01_RIO2_DI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI1_Status
      "KG-GTA:ODH-PLC-01_RIO2_DI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI2_Status
      "KG-GTA:ODH-PLC-01_RIO2_DI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI3_Status
      "KG-GTA:ODH-PLC-01_RIO2_DI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI4_Status
      "KG-GTA:ODH-PLC-01_RIO2_DI5_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DI5_Status
      "KG-GTA:ODH-PLC-01_RIO2_AI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI1_Status
      "KG-GTA:ODH-PLC-01_RIO2_AI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI2_Status
      "KG-GTA:ODH-PLC-01_RIO2_AI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI3_Status
      "KG-GTA:ODH-PLC-01_RIO2_AI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_AI4_Status
      "KG-GTA:ODH-PLC-01_RIO2_DO1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO1_Status
      "KG-GTA:ODH-PLC-01_RIO2_DO2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO2_Status
      "KG-GTA:ODH-PLC-01_RIO2_DO3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_DO3_Status
      "KG-GTA:ODH-PLC-01_RIO2_SvrMod_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO2_SvrMod_Status
      "KG-GTA:ODH-PLC-01_RIO3_IM_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_IM_Connected
      "KG-GTA:ODH-PLC-01_RIO3_DI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI1_Connected
      "KG-GTA:ODH-PLC-01_RIO3_DI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI2_Connected
      "KG-GTA:ODH-PLC-01_RIO3_DI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI3_Connected
      "KG-GTA:ODH-PLC-01_RIO3_DI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI4_Connected
      "KG-GTA:ODH-PLC-01_RIO3_DI5_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI5_Connected
      "KG-GTA:ODH-PLC-01_RIO3_AI1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI1_Connected
      "KG-GTA:ODH-PLC-01_RIO3_AI2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI2_Connected
      "KG-GTA:ODH-PLC-01_RIO3_AI3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI3_Connected
      "KG-GTA:ODH-PLC-01_RIO3_AI4_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI4_Connected
      "KG-GTA:ODH-PLC-01_RIO3_DO1_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO1_Connected
      "KG-GTA:ODH-PLC-01_RIO3_DO2_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO2_Connected
      "KG-GTA:ODH-PLC-01_RIO3_DO3_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO3_Connected
      "KG-GTA:ODH-PLC-01_RIO3_SvrMod_Connected" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_SvrMod_Connected
      "KG-GTA:ODH-PLC-01_RIO3_IM_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_IM_Status
      "KG-GTA:ODH-PLC-01_RIO3_DI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI1_Status
      "KG-GTA:ODH-PLC-01_RIO3_DI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI2_Status
      "KG-GTA:ODH-PLC-01_RIO3_DI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI3_Status
      "KG-GTA:ODH-PLC-01_RIO3_DI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI4_Status
      "KG-GTA:ODH-PLC-01_RIO3_DI5_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DI5_Status
      "KG-GTA:ODH-PLC-01_RIO3_AI1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI1_Status
      "KG-GTA:ODH-PLC-01_RIO3_AI2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI2_Status
      "KG-GTA:ODH-PLC-01_RIO3_AI3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI3_Status
      "KG-GTA:ODH-PLC-01_RIO3_AI4_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_AI4_Status
      "KG-GTA:ODH-PLC-01_RIO3_DO1_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO1_Status
      "KG-GTA:ODH-PLC-01_RIO3_DO2_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO2_Status
      "KG-GTA:ODH-PLC-01_RIO3_DO3_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_DO3_Status
      "KG-GTA:ODH-PLC-01_RIO3_SvrMod_Status" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: RIO3_SvrMod_Status
      "CTLG-CS:ODH-Area_Alarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Alarm
      "CTLG-CS:ODH-Area_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CTLG-CS:ODH-Area_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CXB-CXH:ODH-Area_Alarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Alarm
      "CXB-CXH:ODH-Area_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CXB-CXH:ODH-Area_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-ACH:ODH-Area_Alarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Alarm
      "HCB-ACH:ODH-Area_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-ACH:ODH-Area_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CTLG-CS:ODH-O2iM-20_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "CTLG-CS:ODH-O2iM-20_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "CTLG-CS:ODH-O2iM-20_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "CTLG-CS:ODH-O2iM-20_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "CTLG-CS:ODH-O2iM-20_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "CTLG-CS:ODH-O2iM-20_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "CTLG-CS:ODH-O2iM-20_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "CTLG-CS:ODH-O2iM-20_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CTLG-CS:ODH-O2iM-20_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CTLG-CS:ODH-O2iM-21_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "CTLG-CS:ODH-O2iM-21_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "CTLG-CS:ODH-O2iM-21_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "CTLG-CS:ODH-O2iM-21_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "CTLG-CS:ODH-O2iM-21_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "CTLG-CS:ODH-O2iM-21_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "CTLG-CS:ODH-O2iM-21_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "CTLG-CS:ODH-O2iM-21_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CTLG-CS:ODH-O2iM-21_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CTLG-CS:ODH-O2iM-22_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "CTLG-CS:ODH-O2iM-22_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "CTLG-CS:ODH-O2iM-22_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "CTLG-CS:ODH-O2iM-22_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "CTLG-CS:ODH-O2iM-22_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "CTLG-CS:ODH-O2iM-22_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "CTLG-CS:ODH-O2iM-22_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "CTLG-CS:ODH-O2iM-22_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CTLG-CS:ODH-O2iM-22_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CXB-CXH:ODH-O2iM-13_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "CXB-CXH:ODH-O2iM-13_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "CXB-CXH:ODH-O2iM-13_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "CXB-CXH:ODH-O2iM-13_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "CXB-CXH:ODH-O2iM-13_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "CXB-CXH:ODH-O2iM-13_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "CXB-CXH:ODH-O2iM-13_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "CXB-CXH:ODH-O2iM-13_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CXB-CXH:ODH-O2iM-13_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CXB-CXH:ODH-O2iM-14_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "CXB-CXH:ODH-O2iM-14_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "CXB-CXH:ODH-O2iM-14_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "CXB-CXH:ODH-O2iM-14_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "CXB-CXH:ODH-O2iM-14_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "CXB-CXH:ODH-O2iM-14_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "CXB-CXH:ODH-O2iM-14_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "CXB-CXH:ODH-O2iM-14_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CXB-CXH:ODH-O2iM-14_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CXB-CXH:ODH-O2iM-15_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "CXB-CXH:ODH-O2iM-15_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "CXB-CXH:ODH-O2iM-15_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "CXB-CXH:ODH-O2iM-15_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "CXB-CXH:ODH-O2iM-15_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "CXB-CXH:ODH-O2iM-15_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "CXB-CXH:ODH-O2iM-15_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "CXB-CXH:ODH-O2iM-15_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CXB-CXH:ODH-O2iM-15_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CXB-CXH:ODH-O2iM-16_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "CXB-CXH:ODH-O2iM-16_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "CXB-CXH:ODH-O2iM-16_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "CXB-CXH:ODH-O2iM-16_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "CXB-CXH:ODH-O2iM-16_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "CXB-CXH:ODH-O2iM-16_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "CXB-CXH:ODH-O2iM-16_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "CXB-CXH:ODH-O2iM-16_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CXB-CXH:ODH-O2iM-16_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CXB-CXH:ODH-O2iM-17_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "CXB-CXH:ODH-O2iM-17_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "CXB-CXH:ODH-O2iM-17_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "CXB-CXH:ODH-O2iM-17_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "CXB-CXH:ODH-O2iM-17_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "CXB-CXH:ODH-O2iM-17_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "CXB-CXH:ODH-O2iM-17_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "CXB-CXH:ODH-O2iM-17_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CXB-CXH:ODH-O2iM-17_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CXB-CXH:ODH-O2iM-18_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "CXB-CXH:ODH-O2iM-18_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "CXB-CXH:ODH-O2iM-18_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "CXB-CXH:ODH-O2iM-18_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "CXB-CXH:ODH-O2iM-18_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "CXB-CXH:ODH-O2iM-18_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "CXB-CXH:ODH-O2iM-18_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "CXB-CXH:ODH-O2iM-18_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CXB-CXH:ODH-O2iM-18_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CXB-CXH:ODH-O2iM-19_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "CXB-CXH:ODH-O2iM-19_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "CXB-CXH:ODH-O2iM-19_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "CXB-CXH:ODH-O2iM-19_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "CXB-CXH:ODH-O2iM-19_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "CXB-CXH:ODH-O2iM-19_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "CXB-CXH:ODH-O2iM-19_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "CXB-CXH:ODH-O2iM-19_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "CXB-CXH:ODH-O2iM-19_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-ACH:ODH-O2iM-1_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-ACH:ODH-O2iM-1_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-ACH:ODH-O2iM-1_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-ACH:ODH-O2iM-1_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-ACH:ODH-O2iM-1_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-ACH:ODH-O2iM-1_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-ACH:ODH-O2iM-1_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-ACH:ODH-O2iM-1_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-ACH:ODH-O2iM-1_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-ACH:ODH-O2iM-2_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-ACH:ODH-O2iM-2_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-ACH:ODH-O2iM-2_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-ACH:ODH-O2iM-2_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-ACH:ODH-O2iM-2_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-ACH:ODH-O2iM-2_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-ACH:ODH-O2iM-2_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-ACH:ODH-O2iM-2_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-ACH:ODH-O2iM-2_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-ACH:ODH-O2iM-3_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-ACH:ODH-O2iM-3_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-ACH:ODH-O2iM-3_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-ACH:ODH-O2iM-3_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-ACH:ODH-O2iM-3_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-ACH:ODH-O2iM-3_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-ACH:ODH-O2iM-3_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-ACH:ODH-O2iM-3_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-ACH:ODH-O2iM-3_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-ACH:ODH-O2iM-4_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-ACH:ODH-O2iM-4_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-ACH:ODH-O2iM-4_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-ACH:ODH-O2iM-4_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-ACH:ODH-O2iM-4_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-ACH:ODH-O2iM-4_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-ACH:ODH-O2iM-4_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-ACH:ODH-O2iM-4_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-ACH:ODH-O2iM-4_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-ACH:ODH-O2iM-5_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-ACH:ODH-O2iM-5_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-ACH:ODH-O2iM-5_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-ACH:ODH-O2iM-5_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-ACH:ODH-O2iM-5_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-ACH:ODH-O2iM-5_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-ACH:ODH-O2iM-5_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-ACH:ODH-O2iM-5_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-ACH:ODH-O2iM-5_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-DogSh:ODH-O2iM-12_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-DogSh:ODH-O2iM-12_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-DogSh:ODH-O2iM-12_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-DogSh:ODH-O2iM-12_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-DogSh:ODH-O2iM-12_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-DogSh:ODH-O2iM-12_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-DogSh:ODH-O2iM-12_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-DogSh:ODH-O2iM-12_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-DogSh:ODH-O2iM-12_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-HPGS:ODH-O2iM-10_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-HPGS:ODH-O2iM-10_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-HPGS:ODH-O2iM-10_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-HPGS:ODH-O2iM-10_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-HPGS:ODH-O2iM-10_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-HPGS:ODH-O2iM-10_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-HPGS:ODH-O2iM-10_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-HPGS:ODH-O2iM-10_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-HPGS:ODH-O2iM-10_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-HPGS:ODH-O2iM-11_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-HPGS:ODH-O2iM-11_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-HPGS:ODH-O2iM-11_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-HPGS:ODH-O2iM-11_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-HPGS:ODH-O2iM-11_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-HPGS:ODH-O2iM-11_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-HPGS:ODH-O2iM-11_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-HPGS:ODH-O2iM-11_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-HPGS:ODH-O2iM-11_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-TCH:ODH-O2iM-6_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-TCH:ODH-O2iM-6_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-TCH:ODH-O2iM-6_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-TCH:ODH-O2iM-6_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-TCH:ODH-O2iM-6_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-TCH:ODH-O2iM-6_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-TCH:ODH-O2iM-6_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-TCH:ODH-O2iM-6_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-TCH:ODH-O2iM-6_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-TCH:ODH-O2iM-7_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-TCH:ODH-O2iM-7_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-TCH:ODH-O2iM-7_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-TCH:ODH-O2iM-7_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-TCH:ODH-O2iM-7_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-TCH:ODH-O2iM-7_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-TCH:ODH-O2iM-7_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-TCH:ODH-O2iM-7_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-TCH:ODH-O2iM-7_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-TCH:ODH-O2iM-8_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-TCH:ODH-O2iM-8_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-TCH:ODH-O2iM-8_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-TCH:ODH-O2iM-8_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-TCH:ODH-O2iM-8_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-TCH:ODH-O2iM-8_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-TCH:ODH-O2iM-8_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-TCH:ODH-O2iM-8_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-TCH:ODH-O2iM-8_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "HCB-TCH:ODH-O2iM-9_O2Level" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : REAL;   //EPICS Status variable: O2Level
      "HCB-TCH:ODH-O2iM-9_ODHAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHAlarm
      "HCB-TCH:ODH-O2iM-9_ODHWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ODHWarning
      "HCB-TCH:ODH-O2iM-9_MonitHealthy" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitHealthy
      "HCB-TCH:ODH-O2iM-9_Maint" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: Maint
      "HCB-TCH:ODH-O2iM-9_MonitWarning" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: MonitWarning
      "HCB-TCH:ODH-O2iM-9_SysOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SysOK
      "HCB-TCH:ODH-O2iM-9_WarmUp" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: WarmUp
      "HCB-TCH:ODH-O2iM-9_ConnLost" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: ConnLost
      "CXB-CXH:ODH-RIO-2_SurgeArrOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SurgeArrOK
      "CXB-CXH:ODH-RIO-2_PS24vOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: PS24vOK
      "CXB-CXH:ODH-RIO-2_UPSBatOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBatOK
      "CXB-CXH:ODH-RIO-2_UPS24vOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPS24vOK
      "CXB-CXH:ODH-RIO-2_UPSBuffReady" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBuffReady
      "CXB-CXH:ODH-RIO-2_UPSBatt85" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBatt85
      "CXB-CXH:ODH-RIO-2_UPSAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSAlarm
      "HCB-ACH:ODH-RIO-1_SurgeArrOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SurgeArrOK
      "HCB-ACH:ODH-RIO-1_PS24vOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: PS24vOK
      "HCB-ACH:ODH-RIO-1_UPSBatOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBatOK
      "HCB-ACH:ODH-RIO-1_UPS24vOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPS24vOK
      "HCB-ACH:ODH-RIO-1_UPSBuffReady" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBuffReady
      "HCB-ACH:ODH-RIO-1_UPSBatt85" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBatt85
      "HCB-ACH:ODH-RIO-1_UPSAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSAlarm
      "TS2-020Row:CnPw-U-001_SurgeArrOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: SurgeArrOK
      "TS2-020Row:CnPw-U-001_PS24vOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: PS24vOK
      "TS2-020Row:CnPw-U-001_UPSBatOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBatOK
      "TS2-020Row:CnPw-U-001_UPS24vOK" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPS24vOK
      "TS2-020Row:CnPw-U-001_UPSBuffReady" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBuffReady
      "TS2-020Row:CnPw-U-001_UPSBatt85" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSBatt85
      "TS2-020Row:CnPw-U-001_UPSAlarm" { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} : BOOL;   //EPICS Status variable: UPSAlarm
   END_STRUCT;
BEGIN
END_DATA_BLOCK
FUNCTION "EPICS_device_calls" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0

   VAR_TEMP
      "KG-GTA:ODH-PLC-01" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-Area" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-Area" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-Area" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-O2iM-20" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-O2iM-21" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-O2iM-22" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-13" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-14" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-15" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-16" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-17" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-18" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-19" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-1" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-2" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-3" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-4" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-5" : Bool;   // HASH codes are OK
      "HCB-DogSh:ODH-O2iM-12" : Bool;   // HASH codes are OK
      "HCB-HPGS:ODH-O2iM-10" : Bool;   // HASH codes are OK
      "HCB-HPGS:ODH-O2iM-11" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-6" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-7" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-8" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-9" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-RIO-2" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-RIO-1" : Bool;   // HASH codes are OK
      "TS2-020Row:CnPw-U-001" : Bool;   // HASH codes are OK
   END_VAR

BEGIN
      //Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2018 by European Spallation Source, Lund
      //This block was generated by PLCFactory
      //According to HASH:718980072
      //Description: Description: This function calls the devices according to the corresponding device type

        //DO NOT Modify the following line!!!
        "Utilities".TestInProgress := FALSE;


        //********************************************
        // Device name: KG-GTA:ODH-PLC-01
        // Device type: PLC
        //********************************************

      "DEV_KG-GTA:ODH-PLC-01_iDB" ();

        //********************************************
        // Device name: CTLG-CS:ODH-Area
        // Device type: ODH_Area
        //********************************************

      "DEV_CTLG-CS:ODH-Area_iDB" ();

        //********************************************
        // Device name: CXB-CXH:ODH-Area
        // Device type: ODH_Area
        //********************************************

      "DEV_CXB-CXH:ODH-Area_iDB" ();

        //********************************************
        // Device name: HCB-ACH:ODH-Area
        // Device type: ODH_Area
        //********************************************

      "DEV_HCB-ACH:ODH-Area_iDB" ();

        //********************************************
        // Device name: CTLG-CS:ODH-O2iM-20
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CTLG-CS:ODH-O2iM-20_iDB" ();

        //********************************************
        // Device name: CTLG-CS:ODH-O2iM-21
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CTLG-CS:ODH-O2iM-21_iDB" ();

        //********************************************
        // Device name: CTLG-CS:ODH-O2iM-22
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CTLG-CS:ODH-O2iM-22_iDB" ();

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-13
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-13_iDB" ();

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-14
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-14_iDB" ();

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-15
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-15_iDB" ();

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-16
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-16_iDB" ();

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-17
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-17_iDB" ();

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-18
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-18_iDB" ();

        //********************************************
        // Device name: CXB-CXH:ODH-O2iM-19
        // Device type: ODH_O2iM
        //********************************************

      "DEV_CXB-CXH:ODH-O2iM-19_iDB" ();

        //********************************************
        // Device name: HCB-ACH:ODH-O2iM-1
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-ACH:ODH-O2iM-1_iDB" ();

        //********************************************
        // Device name: HCB-ACH:ODH-O2iM-2
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-ACH:ODH-O2iM-2_iDB" ();

        //********************************************
        // Device name: HCB-ACH:ODH-O2iM-3
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-ACH:ODH-O2iM-3_iDB" ();

        //********************************************
        // Device name: HCB-ACH:ODH-O2iM-4
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-ACH:ODH-O2iM-4_iDB" ();

        //********************************************
        // Device name: HCB-ACH:ODH-O2iM-5
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-ACH:ODH-O2iM-5_iDB" ();

        //********************************************
        // Device name: HCB-DogSh:ODH-O2iM-12
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-DogSh:ODH-O2iM-12_iDB" ();

        //********************************************
        // Device name: HCB-HPGS:ODH-O2iM-10
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-HPGS:ODH-O2iM-10_iDB" ();

        //********************************************
        // Device name: HCB-HPGS:ODH-O2iM-11
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-HPGS:ODH-O2iM-11_iDB" ();

        //********************************************
        // Device name: HCB-TCH:ODH-O2iM-6
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-TCH:ODH-O2iM-6_iDB" ();

        //********************************************
        // Device name: HCB-TCH:ODH-O2iM-7
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-TCH:ODH-O2iM-7_iDB" ();

        //********************************************
        // Device name: HCB-TCH:ODH-O2iM-8
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-TCH:ODH-O2iM-8_iDB" ();

        //********************************************
        // Device name: HCB-TCH:ODH-O2iM-9
        // Device type: ODH_O2iM
        //********************************************

      "DEV_HCB-TCH:ODH-O2iM-9_iDB" ();

        //********************************************
        // Device name: CXB-CXH:ODH-RIO-2
        // Device type: ODH_Rack
        //********************************************

      "DEV_CXB-CXH:ODH-RIO-2_iDB" ();

        //********************************************
        // Device name: HCB-ACH:ODH-RIO-1
        // Device type: ODH_Rack
        //********************************************

      "DEV_HCB-ACH:ODH-RIO-1_iDB" ();

        //********************************************
        // Device name: TS2-020Row:CnPw-U-001
        // Device type: ODH_Rack
        //********************************************

      "DEV_TS2-020Row:CnPw-U-001_iDB" ();
END_FUNCTION
FUNCTION "EPICS_device_calls_test" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0

   VAR_TEMP
      "KG-GTA:ODH-PLC-01" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-Area" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-Area" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-Area" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-O2iM-20" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-O2iM-21" : Bool;   // HASH codes are OK
      "CTLG-CS:ODH-O2iM-22" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-13" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-14" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-15" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-16" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-17" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-18" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-O2iM-19" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-1" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-2" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-3" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-4" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-O2iM-5" : Bool;   // HASH codes are OK
      "HCB-DogSh:ODH-O2iM-12" : Bool;   // HASH codes are OK
      "HCB-HPGS:ODH-O2iM-10" : Bool;   // HASH codes are OK
      "HCB-HPGS:ODH-O2iM-11" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-6" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-7" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-8" : Bool;   // HASH codes are OK
      "HCB-TCH:ODH-O2iM-9" : Bool;   // HASH codes are OK
      "CXB-CXH:ODH-RIO-2" : Bool;   // HASH codes are OK
      "HCB-ACH:ODH-RIO-1" : Bool;   // HASH codes are OK
      "TS2-020Row:CnPw-U-001" : Bool;   // HASH codes are OK
   END_VAR

BEGIN
      //Author: Miklos Boros (miklos.boros@esss.se), Copyrigth 2017-2018 by European Spallation Source, Lund
      //This block was generated by PLCFactory
      //According to HASH:718980072
      //Description: Description: This function calls the devices according to the corresponding device type

      //DO NOT Modify the following line!!!
      "Utilities".TestInProgress := TRUE;


      //********************************************
      // Device name: KG-GTA:ODH-PLC-01
      // Device type: PLC
      //********************************************

      "DEV_KG-GTA:ODH-PLC-01_iDB" (
                                 "SW_Checksum" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_SW_Checksum",
                                 "Text_Checksum" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_Text_Checksum",
                                 "CPU_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_CPU_Connected",
                                 "CPU_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_CPU_Status",
                                 "RIO1_IM_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_IM_Connected",
                                 "RIO1_DI1_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DI1_Connected",
                                 "RIO1_DI2_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DI2_Connected",
                                 "RIO1_DI3_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DI3_Connected",
                                 "RIO1_DI4_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DI4_Connected",
                                 "RIO1_DI5_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DI5_Connected",
                                 "RIO1_AI1_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_AI1_Connected",
                                 "RIO1_AI2_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_AI2_Connected",
                                 "RIO1_AI3_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_AI3_Connected",
                                 "RIO1_AI4_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_AI4_Connected",
                                 "RIO1_DO1_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DO1_Connected",
                                 "RIO1_DO2_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DO2_Connected",
                                 "RIO1_DO3_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DO3_Connected",
                                 "RIO1_SvrMod_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_SvrMod_Connected",
                                 "RIO1_IM_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_IM_Status",
                                 "RIO1_DI1_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DI1_Status",
                                 "RIO1_DI2_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DI2_Status",
                                 "RIO1_DI3_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DI3_Status",
                                 "RIO1_DI4_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DI4_Status",
                                 "RIO1_DI5_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DI5_Status",
                                 "RIO1_AI1_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_AI1_Status",
                                 "RIO1_AI2_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_AI2_Status",
                                 "RIO1_AI3_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_AI3_Status",
                                 "RIO1_AI4_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_AI4_Status",
                                 "RIO1_DO1_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DO1_Status",
                                 "RIO1_DO2_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DO2_Status",
                                 "RIO1_DO3_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_DO3_Status",
                                 "RIO1_SvrMod_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO1_SvrMod_Status",
                                 "RIO2_IM_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_IM_Connected",
                                 "RIO2_DI1_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DI1_Connected",
                                 "RIO2_DI2_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DI2_Connected",
                                 "RIO2_DI3_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DI3_Connected",
                                 "RIO2_DI4_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DI4_Connected",
                                 "RIO2_DI5_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DI5_Connected",
                                 "RIO2_AI1_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_AI1_Connected",
                                 "RIO2_AI2_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_AI2_Connected",
                                 "RIO2_AI3_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_AI3_Connected",
                                 "RIO2_AI4_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_AI4_Connected",
                                 "RIO2_DO1_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DO1_Connected",
                                 "RIO2_DO2_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DO2_Connected",
                                 "RIO2_DO3_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DO3_Connected",
                                 "RIO2_SvrMod_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_SvrMod_Connected",
                                 "RIO2_IM_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_IM_Status",
                                 "RIO2_DI1_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DI1_Status",
                                 "RIO2_DI2_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DI2_Status",
                                 "RIO2_DI3_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DI3_Status",
                                 "RIO2_DI4_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DI4_Status",
                                 "RIO2_DI5_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DI5_Status",
                                 "RIO2_AI1_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_AI1_Status",
                                 "RIO2_AI2_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_AI2_Status",
                                 "RIO2_AI3_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_AI3_Status",
                                 "RIO2_AI4_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_AI4_Status",
                                 "RIO2_DO1_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DO1_Status",
                                 "RIO2_DO2_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DO2_Status",
                                 "RIO2_DO3_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_DO3_Status",
                                 "RIO2_SvrMod_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO2_SvrMod_Status",
                                 "RIO3_IM_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_IM_Connected",
                                 "RIO3_DI1_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DI1_Connected",
                                 "RIO3_DI2_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DI2_Connected",
                                 "RIO3_DI3_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DI3_Connected",
                                 "RIO3_DI4_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DI4_Connected",
                                 "RIO3_DI5_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DI5_Connected",
                                 "RIO3_AI1_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_AI1_Connected",
                                 "RIO3_AI2_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_AI2_Connected",
                                 "RIO3_AI3_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_AI3_Connected",
                                 "RIO3_AI4_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_AI4_Connected",
                                 "RIO3_DO1_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DO1_Connected",
                                 "RIO3_DO2_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DO2_Connected",
                                 "RIO3_DO3_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DO3_Connected",
                                 "RIO3_SvrMod_Connected" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_SvrMod_Connected",
                                 "RIO3_IM_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_IM_Status",
                                 "RIO3_DI1_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DI1_Status",
                                 "RIO3_DI2_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DI2_Status",
                                 "RIO3_DI3_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DI3_Status",
                                 "RIO3_DI4_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DI4_Status",
                                 "RIO3_DI5_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DI5_Status",
                                 "RIO3_AI1_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_AI1_Status",
                                 "RIO3_AI2_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_AI2_Status",
                                 "RIO3_AI3_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_AI3_Status",
                                 "RIO3_AI4_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_AI4_Status",
                                 "RIO3_DO1_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DO1_Status",
                                 "RIO3_DO2_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DO2_Status",
                                 "RIO3_DO3_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_DO3_Status",
                                 "RIO3_SvrMod_Status" := "EPICS_PLC_Tester".#"KG-GTA:ODH-PLC-01_RIO3_SvrMod_Status",
                                 DEVICE_PARAM_OK=>#"KG-GTA:ODH-PLC-01");

      //********************************************
      // Device name: CTLG-CS:ODH-Area
      // Device type: ODH_Area
      //********************************************

      "DEV_CTLG-CS:ODH-Area_iDB" (
                                 "Alarm" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-Area_Alarm",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-Area_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-Area_ConnLost",
                                 DEVICE_PARAM_OK=>#"CTLG-CS:ODH-Area");

      //********************************************
      // Device name: CXB-CXH:ODH-Area
      // Device type: ODH_Area
      //********************************************

      "DEV_CXB-CXH:ODH-Area_iDB" (
                                 "Alarm" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-Area_Alarm",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-Area_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-Area_ConnLost",
                                 DEVICE_PARAM_OK=>#"CXB-CXH:ODH-Area");

      //********************************************
      // Device name: HCB-ACH:ODH-Area
      // Device type: ODH_Area
      //********************************************

      "DEV_HCB-ACH:ODH-Area_iDB" (
                                 "Alarm" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-Area_Alarm",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-Area_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-Area_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-ACH:ODH-Area");

      //********************************************
      // Device name: CTLG-CS:ODH-O2iM-20
      // Device type: ODH_O2iM
      //********************************************

      "DEV_CTLG-CS:ODH-O2iM-20_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-20_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-20_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-20_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-20_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-20_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-20_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-20_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-20_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-20_ConnLost",
                                 DEVICE_PARAM_OK=>#"CTLG-CS:ODH-O2iM-20");

      //********************************************
      // Device name: CTLG-CS:ODH-O2iM-21
      // Device type: ODH_O2iM
      //********************************************

      "DEV_CTLG-CS:ODH-O2iM-21_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-21_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-21_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-21_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-21_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-21_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-21_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-21_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-21_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-21_ConnLost",
                                 DEVICE_PARAM_OK=>#"CTLG-CS:ODH-O2iM-21");

      //********************************************
      // Device name: CTLG-CS:ODH-O2iM-22
      // Device type: ODH_O2iM
      //********************************************

      "DEV_CTLG-CS:ODH-O2iM-22_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-22_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-22_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-22_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-22_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-22_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-22_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-22_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-22_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CTLG-CS:ODH-O2iM-22_ConnLost",
                                 DEVICE_PARAM_OK=>#"CTLG-CS:ODH-O2iM-22");

      //********************************************
      // Device name: CXB-CXH:ODH-O2iM-13
      // Device type: ODH_O2iM
      //********************************************

      "DEV_CXB-CXH:ODH-O2iM-13_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-13_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-13_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-13_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-13_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-13_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-13_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-13_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-13_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-13_ConnLost",
                                 DEVICE_PARAM_OK=>#"CXB-CXH:ODH-O2iM-13");

      //********************************************
      // Device name: CXB-CXH:ODH-O2iM-14
      // Device type: ODH_O2iM
      //********************************************

      "DEV_CXB-CXH:ODH-O2iM-14_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-14_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-14_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-14_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-14_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-14_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-14_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-14_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-14_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-14_ConnLost",
                                 DEVICE_PARAM_OK=>#"CXB-CXH:ODH-O2iM-14");

      //********************************************
      // Device name: CXB-CXH:ODH-O2iM-15
      // Device type: ODH_O2iM
      //********************************************

      "DEV_CXB-CXH:ODH-O2iM-15_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-15_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-15_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-15_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-15_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-15_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-15_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-15_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-15_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-15_ConnLost",
                                 DEVICE_PARAM_OK=>#"CXB-CXH:ODH-O2iM-15");

      //********************************************
      // Device name: CXB-CXH:ODH-O2iM-16
      // Device type: ODH_O2iM
      //********************************************

      "DEV_CXB-CXH:ODH-O2iM-16_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-16_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-16_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-16_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-16_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-16_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-16_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-16_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-16_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-16_ConnLost",
                                 DEVICE_PARAM_OK=>#"CXB-CXH:ODH-O2iM-16");

      //********************************************
      // Device name: CXB-CXH:ODH-O2iM-17
      // Device type: ODH_O2iM
      //********************************************

      "DEV_CXB-CXH:ODH-O2iM-17_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-17_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-17_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-17_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-17_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-17_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-17_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-17_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-17_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-17_ConnLost",
                                 DEVICE_PARAM_OK=>#"CXB-CXH:ODH-O2iM-17");

      //********************************************
      // Device name: CXB-CXH:ODH-O2iM-18
      // Device type: ODH_O2iM
      //********************************************

      "DEV_CXB-CXH:ODH-O2iM-18_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-18_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-18_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-18_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-18_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-18_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-18_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-18_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-18_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-18_ConnLost",
                                 DEVICE_PARAM_OK=>#"CXB-CXH:ODH-O2iM-18");

      //********************************************
      // Device name: CXB-CXH:ODH-O2iM-19
      // Device type: ODH_O2iM
      //********************************************

      "DEV_CXB-CXH:ODH-O2iM-19_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-19_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-19_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-19_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-19_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-19_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-19_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-19_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-19_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-O2iM-19_ConnLost",
                                 DEVICE_PARAM_OK=>#"CXB-CXH:ODH-O2iM-19");

      //********************************************
      // Device name: HCB-ACH:ODH-O2iM-1
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-ACH:ODH-O2iM-1_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-1_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-1_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-1_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-1_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-1_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-1_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-1_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-1_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-1_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-ACH:ODH-O2iM-1");

      //********************************************
      // Device name: HCB-ACH:ODH-O2iM-2
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-ACH:ODH-O2iM-2_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-2_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-2_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-2_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-2_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-2_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-2_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-2_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-2_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-2_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-ACH:ODH-O2iM-2");

      //********************************************
      // Device name: HCB-ACH:ODH-O2iM-3
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-ACH:ODH-O2iM-3_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-3_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-3_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-3_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-3_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-3_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-3_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-3_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-3_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-3_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-ACH:ODH-O2iM-3");

      //********************************************
      // Device name: HCB-ACH:ODH-O2iM-4
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-ACH:ODH-O2iM-4_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-4_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-4_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-4_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-4_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-4_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-4_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-4_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-4_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-4_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-ACH:ODH-O2iM-4");

      //********************************************
      // Device name: HCB-ACH:ODH-O2iM-5
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-ACH:ODH-O2iM-5_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-5_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-5_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-5_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-5_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-5_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-5_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-5_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-5_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-O2iM-5_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-ACH:ODH-O2iM-5");

      //********************************************
      // Device name: HCB-DogSh:ODH-O2iM-12
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-DogSh:ODH-O2iM-12_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-DogSh:ODH-O2iM-12_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-DogSh:ODH-O2iM-12_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-DogSh:ODH-O2iM-12_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-DogSh:ODH-O2iM-12_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-DogSh:ODH-O2iM-12_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-DogSh:ODH-O2iM-12_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-DogSh:ODH-O2iM-12_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-DogSh:ODH-O2iM-12_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-DogSh:ODH-O2iM-12_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-DogSh:ODH-O2iM-12");

      //********************************************
      // Device name: HCB-HPGS:ODH-O2iM-10
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-HPGS:ODH-O2iM-10_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-10_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-10_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-10_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-10_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-10_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-10_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-10_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-10_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-10_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-HPGS:ODH-O2iM-10");

      //********************************************
      // Device name: HCB-HPGS:ODH-O2iM-11
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-HPGS:ODH-O2iM-11_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-11_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-11_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-11_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-11_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-11_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-11_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-11_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-11_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-HPGS:ODH-O2iM-11_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-HPGS:ODH-O2iM-11");

      //********************************************
      // Device name: HCB-TCH:ODH-O2iM-6
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-TCH:ODH-O2iM-6_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-6_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-6_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-6_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-6_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-6_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-6_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-6_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-6_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-6_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-TCH:ODH-O2iM-6");

      //********************************************
      // Device name: HCB-TCH:ODH-O2iM-7
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-TCH:ODH-O2iM-7_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-7_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-7_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-7_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-7_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-7_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-7_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-7_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-7_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-7_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-TCH:ODH-O2iM-7");

      //********************************************
      // Device name: HCB-TCH:ODH-O2iM-8
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-TCH:ODH-O2iM-8_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-8_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-8_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-8_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-8_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-8_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-8_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-8_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-8_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-8_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-TCH:ODH-O2iM-8");

      //********************************************
      // Device name: HCB-TCH:ODH-O2iM-9
      // Device type: ODH_O2iM
      //********************************************

      "DEV_HCB-TCH:ODH-O2iM-9_iDB" (
                                 "O2Level" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-9_O2Level",
                                 "ODHAlarm" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-9_ODHAlarm",
                                 "ODHWarning" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-9_ODHWarning",
                                 "MonitHealthy" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-9_MonitHealthy",
                                 "Maint" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-9_Maint",
                                 "MonitWarning" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-9_MonitWarning",
                                 "SysOK" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-9_SysOK",
                                 "WarmUp" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-9_WarmUp",
                                 "ConnLost" := "EPICS_PLC_Tester".#"HCB-TCH:ODH-O2iM-9_ConnLost",
                                 DEVICE_PARAM_OK=>#"HCB-TCH:ODH-O2iM-9");

      //********************************************
      // Device name: CXB-CXH:ODH-RIO-2
      // Device type: ODH_Rack
      //********************************************

      "DEV_CXB-CXH:ODH-RIO-2_iDB" (
                                 "SurgeArrOK" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-RIO-2_SurgeArrOK",
                                 "PS24vOK" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-RIO-2_PS24vOK",
                                 "UPSBatOK" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-RIO-2_UPSBatOK",
                                 "UPS24vOK" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-RIO-2_UPS24vOK",
                                 "UPSBuffReady" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-RIO-2_UPSBuffReady",
                                 "UPSBatt85" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-RIO-2_UPSBatt85",
                                 "UPSAlarm" := "EPICS_PLC_Tester".#"CXB-CXH:ODH-RIO-2_UPSAlarm",
                                 DEVICE_PARAM_OK=>#"CXB-CXH:ODH-RIO-2");

      //********************************************
      // Device name: HCB-ACH:ODH-RIO-1
      // Device type: ODH_Rack
      //********************************************

      "DEV_HCB-ACH:ODH-RIO-1_iDB" (
                                 "SurgeArrOK" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-RIO-1_SurgeArrOK",
                                 "PS24vOK" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-RIO-1_PS24vOK",
                                 "UPSBatOK" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-RIO-1_UPSBatOK",
                                 "UPS24vOK" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-RIO-1_UPS24vOK",
                                 "UPSBuffReady" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-RIO-1_UPSBuffReady",
                                 "UPSBatt85" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-RIO-1_UPSBatt85",
                                 "UPSAlarm" := "EPICS_PLC_Tester".#"HCB-ACH:ODH-RIO-1_UPSAlarm",
                                 DEVICE_PARAM_OK=>#"HCB-ACH:ODH-RIO-1");

      //********************************************
      // Device name: TS2-020Row:CnPw-U-001
      // Device type: ODH_Rack
      //********************************************

      "DEV_TS2-020Row:CnPw-U-001_iDB" (
                                 "SurgeArrOK" := "EPICS_PLC_Tester".#"TS2-020Row:CnPw-U-001_SurgeArrOK",
                                 "PS24vOK" := "EPICS_PLC_Tester".#"TS2-020Row:CnPw-U-001_PS24vOK",
                                 "UPSBatOK" := "EPICS_PLC_Tester".#"TS2-020Row:CnPw-U-001_UPSBatOK",
                                 "UPS24vOK" := "EPICS_PLC_Tester".#"TS2-020Row:CnPw-U-001_UPS24vOK",
                                 "UPSBuffReady" := "EPICS_PLC_Tester".#"TS2-020Row:CnPw-U-001_UPSBuffReady",
                                 "UPSBatt85" := "EPICS_PLC_Tester".#"TS2-020Row:CnPw-U-001_UPSBatt85",
                                 "UPSAlarm" := "EPICS_PLC_Tester".#"TS2-020Row:CnPw-U-001_UPSAlarm",
                                 DEVICE_PARAM_OK=>#"TS2-020Row:CnPw-U-001");
END_FUNCTION
TYPE "typeModul"
VERSION : 0.1
   STRUCT
      slotLaddr : HW_IO;   // Hardware ID of  module
      slotErrorState : Bool;   // error state of module
   END_STRUCT;

END_TYPE


TYPE "typeDevice"
VERSION : 0.1
   STRUCT
      laddr : HW_DEVICE;   // Logical address of a device or slave (system constant in HW configuration)
      "name" : String[50];   // Device name
      errorState : USInt;   // Status of the device 1=ok!, 2=faulty, 3=lost connection, 4=disabled, 12= was faulty, 13=was lost, 14=was disabled
      error : Bool;   // Signalizes an error in the device/slave
      nextDevice : Int;   // device number of next device
      actualConfiguredModules : Int;   // Actual number of configured modules in the device
      slot : Array[0..20] of "typeModul";   // slot informations
   END_STRUCT;

END_TYPE


TYPE "typeIoSystem"
VERSION : 0.1
   STRUCT
      ioSystemId : UInt;   // ID of  IO System
      ioSystemError : Bool;   // TRUE: if an error is occured in the assigned IO System
      firstDevice : Int := 0;   // device number (index) of first device in IO System
      lastDevice : Int := 0;   // device number (index) of last device IO System
      actualConfiguredDevices : Int := 0;   // Actual number of configured devices in the IO System
      device : Array[1..10] of "typeDevice";   // List of all devices in the IO System
   END_STRUCT;

END_TYPE

TYPE "typePlc"
VERSION : 0.1
   STRUCT
      actualConfiguredCentralModules : Int;   // Actual number of configured local modules
      errorState : Bool;   // Status of the device 1=ok!, 2=faulty, 3=lost connection, 4=disabled, 12= was faulty, 13=was lost, 14=was disabled
      slot : Array[1..5] of "typeModul";   // slot informations
   END_STRUCT;

END_TYPE



DATA_BLOCK "DiagnosticsData"
TITLE = Diagosis data DB
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : SIEMENS
FAMILY : Diagnose
NAME : '10'
VERSION : 0.1
NON_RETAIN
//The global data block contains the data structure of the IO system, the control, the devices with the modules and an error buffer.
   VAR 
      plc : "typePlc";   // diagnosis information PLC
      ioSystem : Array[1..5] of "typeIoSystem";   // diagnosis information IO systems
   END_VAR


BEGIN

END_DATA_BLOCK

FUNCTION_BLOCK "DiagStartupIoSystem"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT DB_SPECIFIC
      ioSystemHwId : HW_IOSYSTEM;   // This ID is representing the IO System (PN or DP), find the ID in the system constants
   END_VAR

   VAR_OUTPUT 
      status : Int;   // The return value of system function, where the last error occured
      instructionError : Int;   // Indicates in which system function the error occured: 1= DeviceStates PN , 2=GetName PN, 3=ModuleStates PN,  4=DeviceStates DP, 5= GetName DP. 6= ModuleStates DP
      errorIndex : Int;   // The last index of the respective loop, if an error occures
   END_VAR

   VAR_IN_OUT 
      ioSystem : "typeIoSystem";   // The diagnostics structure for one IO System
   END_VAR

   VAR 
      statActualConfiguredDevices : Int := 0;   // Actual number of devices in the PN IO System
      statGeoAddr {OriginalPartName := 'GEOADDR'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : GEOADDR;   // Slot information
      statGeoLaddr { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : HW_ANY;   // GEO2LOG hardware identifier
      statConfiguredDevices { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..1023] of Bool;   // Temporary storage of the return of "DeviceStates", to combine the states of the devices with numbers and names
      statExistingDevices : Array[0..1023] of Bool;   // Temporary storage of the return of "DeviceStates", to combine the states of the devices with numbers and names
      statFaultyDevices : Array[0..1023] of Bool;   // Temporary storage of the return of "DeviceStates", to combine the states of the divices with numbers and names
      statDisabledDevices { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..1023] of Bool;   // Storage of the status of all devices in the PN IO System --> State: Disabled
      statProblemDevices { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..1023] of Bool;   // Storage of the status of all devices in the PN IO System --> State: Problem
      statDeviceModuleStates : Array[0..127] of Bool;   // Storage of the status of all modules in the PN Devices --> State: Problem
      instGetNameDevices {OriginalPartName := 'FB_806_S71500'; LibVersion := '1.3'} : Get_Name;   // Instance of system function "GetName"
      statInitString : String;   // Used to initialize the temporary string to convert into STRING[50]
      statFirstDevice : UInt;   // Station number of the first device of the list
      statFirstDeviceFlag { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := TRUE;   // Help tag for the first device in the linked list
      statLastDevice : UInt;   // Station number of the last device of the list
      statLinkedListPointer : Int;   // The actual index pointer of the linked list (Actual pointer = Station number of the device)
      statFirstRun : Bool := TRUE;   // Signalizes the first run
      statResetStatesOld : Bool;   // Detect a rising edge at ResetStates
      statMaxDevices : Int;
   END_VAR

   VAR_TEMP 
      tempIndex : Int;   // index configured devices
      tempSlotIndex : Int;   // Loop index
      tempModuleNum : Int;   // index module number
      tempRetValGeo : Int;   // GEO2LOG error information
      tempRetValDeviceStates : Int;   // DeviceStates error information
      tempRetValModuleStates : Int;   // Return value system function ModuleStates
      tempStringConvert : String;   // Store the device names temporary here, to convert them into STRING[50]
      tempLastDevice : UInt;   // Temporary storage of the actual index, if it is the last device --> store it in static
      tempIoSystemError : Bool;
   END_VAR

   VAR CONSTANT 
      STATE_CONFIGURED : USInt := 1;   // Used for instruction DeviceStates, read out all configured devices
      STATE_FAULTY : USInt := 2;   // Used for instruction DeviceStates, read out all faulty devices
      STATE_DISABLED : USInt := 3;   // Used for instruction DeviceStates, read out all disabled devices
      STATE_EXIST : USInt := 4;   // Used for instruction DeviceStates, read out all devices not reachable
      STATE_PROBLEM : USInt := 5;   // Used for instruction DeviceStates, read out all devices with several problems
      DEVICE_SLAVE : USInt := 2;   // GEO2LOG structure: HW type = 2
      MODULE_OF_DEVICE : USInt := 4;   // GEO2LOG structure: HW type = 4
      IO_SYSTEM_AREA : USInt := 1;   // GEO2LOG structure: Area = 1
      DP_SYSTEM_AREA : USInt := 2;   // GEO2LOG structure: Area = 2
      ERR_DEV_STATE_DEVICES : USInt := 1;   // Identifies the instruction behind the error code of output "Status" --> DeviceStates PN (Configured, faulty, existing)
      ERR_GET_NAME_DEVICES : USInt := 2;   // Identifies the instruction behind the error code of output "Status" -->  GetName of devices PN
      ERR_MOD_STAT_DEVICES : USInt := 3;   // Identifies the instruction behind the error code of output "Status" --> ModuleStates PN
      ERR_DEV_STAT_PN : USInt := 1;   // Value for output instruction error, DeviceStates PN devices
      ERR_MOD_STAT_PN : USInt := 4;   // Value for output instruction error, ModuleStates PN devices
      MAX_SLAVES_DP : Int := 127;
      MAX_SLAVES_PN : Int := 127;
   END_VAR


BEGIN
	//=============================================================================
	//Author: SIEMENS, Owner: Miklos Boros
	//        email: borosmiklos@gmail.com; miklos.boros@esss.se
	//
	//Functionality: Determine hardware identifier and module states from 
	//               PN or DP IO system
	// 
	//
	//Please Note:
	//        This block is part of the generated ESS Standard Code
	//        DON'T CHANGE THIS BLOCK MANUALY. Any changes will be overwritten in the next code generation.
	//
	//
	//Change log table:
	//Version  Date         Expert in charge      Changes applied
	//01.00.00 29.08.2017   ESS/ICS               First released version for PLCFactory 
	//02.00.00 09-04-2018   ESS/ICS               Major bug fix for PN/DP devices
	//=============================================================================
	
	
	// The startup will be executed only once --> initialize the first run
	// indicator.
	#statFirstDeviceFlag := TRUE;
	#statFirstRun := TRUE;
	#statActualConfiguredDevices := 0;
	#statFirstDevice := 1;
	#statLastDevice := 1;
	
	//=============================================================================
	// CONFIGURED DEVICES
	//=============================================================================
	// Find out how much devices are configured in the IO System --> PROFINET IO
	// This number is the maximum number of devices, which will be checked in the
	// following programm
	#tempRetValDeviceStates := DeviceStates(LADDR := #ioSystemHwId,
	                                        MODE := #STATE_CONFIGURED,
	                                        STATE := #statConfiguredDevices);
	
	// Check if the block call was successful
	IF (#tempRetValDeviceStates <> 0)
	THEN
	    // Error handling
	    #status := #tempRetValDeviceStates;
	    #instructionError := #ERR_DEV_STATE_DEVICES;
	    // Call ok --> store the actual number of configured devices    
	ELSE
	    ;
	END_IF;
	
	//=============================================================================
	// EXISTING DEVICES
	//=============================================================================
	#tempRetValDeviceStates := DeviceStates(LADDR := #ioSystemHwId,
	                                        MODE := #STATE_EXIST,
	                                        STATE := #statExistingDevices);
	
	// Check if the block call was successful
	IF (#tempRetValDeviceStates <> 0)
	THEN
	    // Error handling
	    #status := #tempRetValDeviceStates;
	    #instructionError := #ERR_DEV_STATE_DEVICES;
	    // Call ok --> store the actual number of configured devices    
	ELSE
	    ;
	END_IF;
	
	//=============================================================================
	// FAULTY DEVICES
	//=============================================================================
	#tempRetValDeviceStates := DeviceStates(LADDR := #ioSystemHwId,
	                                        MODE := #STATE_FAULTY,
	                                        STATE := #statFaultyDevices);
	
	// Check if the block call was successful
	IF (#tempRetValDeviceStates <> 0)
	THEN
	    // Error handling
	    #status := #tempRetValDeviceStates;
	    #instructionError := #ERR_DEV_STATE_DEVICES;
	    // Call ok --> store the actual number of configured devices    
	ELSE
	    ;
	END_IF;
	
	// Find out the number of the assigned IO system, to define if it is
	// a PN or DP Network
	#tempRetValGeo := LOG2GEO(LADDR := #ioSystemHwId,
	                          GEOADDR := #statGeoAddr);
	
	// set IO system ID
	#ioSystem.ioSystemId := #statGeoAddr.IOSYSTEM;
	
	// Inilize the structure for system function GEO2LOG
	#statGeoAddr.HWTYPE := #DEVICE_SLAVE;   // Hardware type 2: IO device
	// Predefine the type OF IO system. Either Profinet IO or Profibus DP
	IF ((#statGeoAddr.IOSYSTEM >= 100)
	    AND (#statGeoAddr.IOSYSTEM <= 115))
	THEN
	    #statGeoAddr.AREA := #IO_SYSTEM_AREA;   // Area ID 1: PROFINET IO
	    #statMaxDevices := #MAX_SLAVES_PN;
	ELSIF ((#statGeoAddr.IOSYSTEM >= 1)
	    AND (#statGeoAddr.IOSYSTEM <= 32))
	THEN
	    #statGeoAddr.AREA := #DP_SYSTEM_AREA;   // Area ID 1: Profibus DP
	    #statMaxDevices := #MAX_SLAVES_DP;
	ELSE
	    ;
	END_IF;
	
	// Go trough all devices and get the status of the configured
	FOR #tempIndex := 1 TO #statMaxDevices DO
	    // The devices are configured --> Read out the logical address and the
	    // device name
	    IF (#statConfiguredDevices[#tempIndex] = TRUE)
	    THEN
	        // Increment the actual configured devices, store the state and
	        // HW_ID as an numerical value (UINT)
	        #statActualConfiguredDevices := #statActualConfiguredDevices + 1;
	        
	        // Store the first configured device for the linked list
	        IF (#statFirstDeviceFlag = TRUE)
	        THEN
	            #statFirstDevice := INT_TO_UINT(#tempIndex);
	            #ioSystem.firstDevice := UINT_TO_INT(#statFirstDevice);
	            #statFirstDeviceFlag := FALSE;
	            #tempLastDevice := INT_TO_UINT(#tempIndex);
	            // It is not the first bit --> Store the actual index as "next device"
	            // in the further one!
	        ELSE
	            #ioSystem.device[#tempLastDevice].nextDevice := #tempIndex;
	            #tempLastDevice := INT_TO_UINT(#tempIndex);
	        END_IF;
	        // Store the index of the last device for the exit condition of the
	        // followiing instructions
	        #statLastDevice := #tempLastDevice;
	        #ioSystem.lastDevice := UINT_TO_INT(#statLastDevice);
	        
	        // Station number 
	        #statGeoAddr.STATION := INT_TO_UINT(#tempIndex);
	        // read LADDR from devices
	        #tempRetValGeo := GEO2LOG(GEOADDR := #statGeoAddr,
	                                  LADDR => #statGeoLaddr);
	        // Everything is ok!
	        IF (#tempRetValGeo = 0)
	        THEN
	            // store LADDR from devices in diagnostic data block
	            #ioSystem.device[#tempIndex].laddr := #statGeoLaddr;
	            
	            // Store the device name, if the device is existing
	            // Get name is an acyclic instruction. In the startup OB, the
	            // instruction has to be repeated until it is done or error
	            REPEAT
	                // Get device name of each decive in PN System
	                #instGetNameDevices(LADDR := #ioSystemHwId,
	                                    STATION_NR := #statGeoAddr.STATION,
	                                    DATA := #tempStringConvert);
	                
	            UNTIL (#instGetNameDevices.DONE = TRUE)
	                OR (#instGetNameDevices.ERROR = TRUE)
	            END_REPEAT;
	            
	            IF (#instGetNameDevices.ERROR = TRUE)
	            THEN
	                // Error handling
	                #status := WORD_TO_INT(#instGetNameDevices.STATUS);
	                #instructionError := #ERR_GET_NAME_DEVICES;
	                #errorIndex := #tempIndex;
	                
	                // Everything is ok --> Convert the String[254] into String[50]    
	            ELSIF (#instGetNameDevices.DONE = TRUE)
	            THEN
	                // Cut all characters more than 50 to reduce the string length
	                #ioSystem.device[#tempIndex].name := DELETE(IN := #tempStringConvert,
	                                                            L := 204,
	                                                            P := 50);
	                
	                // Initialize the temporary string before next loop
	                #tempStringConvert := #statInitString;
	            ELSE
	                ;
	            END_IF;
	        ELSE
	            // If the return value ist not = 0 --> the device/system/module is
	            // not configured --> No error handling
	            // set LADDR from devices to 0 in diagnostic data block
	            #ioSystem.device[#tempIndex].laddr := 0;
	            #ioSystem.device[#tempIndex].name := '';
	        END_IF;
	        
	        // Check if the configured devices are faulty or lost once through
	        // the startup!
	        IF (#statExistingDevices[#tempIndex] = TRUE)
	        THEN
	            IF (#statFaultyDevices[#tempIndex] = TRUE)
	            THEN
	                
	                #ioSystem.device[#tempIndex].errorState := 2;
	                #ioSystem.device[#tempIndex].error := TRUE;
	                
	                // The device is not faulty and does exist --> set state ok!    
	            ELSE
	                #ioSystem.device[#tempIndex].errorState := 1;
	                #ioSystem.device[#tempIndex].error := FALSE;
	            END_IF;
	            // The connection to the device is lost at the moment    
	        ELSE
	            #ioSystem.device[#tempIndex].errorState := 3;
	            #ioSystem.device[#tempIndex].error := TRUE;
	        END_IF;
	        // No device is configured   
	    ELSE
	        ;
	    END_IF;
	    
	END_FOR;
	// Store the actual configured devices in the diagnostics structure
	#ioSystem.actualConfiguredDevices := #statActualConfiguredDevices;
	
	// Mark parameter "Next Device" of the last device in the list
	// --> "Next Device" = negative --> Last device in the list
	#ioSystem.device[#statLastDevice].nextDevice := -1;
	
	// Go through the devices until the last device is reached
	// If there are gaps between the device-list, jump over and have a look on
	// the "NextDevice" parameter
	REPEAT
	    IF (#statFirstRun = TRUE)
	    THEN
	        // The index of the linked list is representing the station number.
	        #statGeoAddr.STATION := #statFirstDevice;
	        // Initialize the pointer for the first run 
	        #statLinkedListPointer := UINT_TO_INT(#statFirstDevice);
	        // Reset the flag, which signalizes the first run.
	        #statFirstRun := FALSE;
	    ELSE
	        // The index of the linked list is representing the station number.
	        #statGeoAddr.STATION := INT_TO_UINT(#statLinkedListPointer);
	    END_IF;
	    
	    //=============================================================================
	    // Get the logical address of all modules and store the actual number of
	    // modules from each device
	    //=============================================================================
	    
	    // Inilize the structure for system function GEO2LOG
	    #statGeoAddr.HWTYPE := #MODULE_OF_DEVICE;   // Hardware type 4: Module
	    FOR #tempModuleNum := 0 TO 20 DO
	        // Slot number
	        #statGeoAddr.SLOT := INT_TO_UINT(#tempModuleNum);
	        // read LADDR from modules
	        #tempRetValGeo := GEO2LOG(GEOADDR := #statGeoAddr,
	                                  LADDR => #statGeoLaddr);
	        // check Retval
	        IF (#tempRetValGeo = 0)
	        THEN
	            // store LADDR from modules in diagnostic data block
	            #ioSystem.device[#statLinkedListPointer].slot[#tempModuleNum].slotLaddr := #statGeoLaddr;
	            #ioSystem.device[#statLinkedListPointer].actualConfiguredModules := #ioSystem.device[#statLinkedListPointer].actualConfiguredModules + 1;
	        ELSE
	            // If the return value ist not = 0 --> the device/system/module is
	            // not configured --> No error handling
	            // set LADDR from modules to 0 in diagnostic data block
	            #ioSystem.device[#statLinkedListPointer].slot[#tempModuleNum].slotLaddr := 0;
	        END_IF;
	    END_FOR;
	    
	    //=============================================================================
	    // Check modules of faulty Devices
	    //=============================================================================
	    
	    // Check the state of the configured devices
	    IF (#ioSystem.device[#statLinkedListPointer].errorState = 2)
	    THEN
	        // The device is reachable, but faulty because of an error in a
	        // subordinated system --> check the modules
	        #tempRetValModuleStates := ModuleStates(LADDR := #ioSystem.device[#statLinkedListPointer].laddr,
	                                                MODE := #STATE_PROBLEM,
	                                                STATE := #statDeviceModuleStates);
	        
	        IF (#tempRetValModuleStates <> 0)
	        THEN
	            // Error hanlding
	            #status := #tempRetValModuleStates;
	            #instructionError := #ERR_MOD_STAT_DEVICES;
	            #errorIndex := UINT_TO_INT(#statFirstDevice);
	        ELSE
	            // Store the state of the different module in the diag DB
	            FOR #tempSlotIndex := 0 TO #ioSystem.device[#statFirstDevice].actualConfiguredModules DO
	                IF (#statDeviceModuleStates[#tempSlotIndex + 1] = TRUE)
	                THEN
	                    #ioSystem.device[#statLinkedListPointer].slot[#tempSlotIndex].slotErrorState := TRUE;
	                ELSE
	                    #ioSystem.device[#statLinkedListPointer].slot[#tempSlotIndex].slotErrorState := FALSE;
	                END_IF;
	            END_FOR;
	        END_IF;
	    ELSIF (#ioSystem.device[#statLinkedListPointer].errorState = 3)
	    THEN
	        
	        FOR #tempSlotIndex := 0 TO #ioSystem.device[#statLinkedListPointer].actualConfiguredModules DO
	            IF (#ioSystem.device[#statLinkedListPointer].slot[#tempSlotIndex].slotLaddr <> 0)
	            THEN
	                #ioSystem.device[#statLinkedListPointer].slot[#tempSlotIndex].slotErrorState := TRUE;
	            END_IF;
	        END_FOR;
	        
	    ELSE
	        ; // no faulty device --> nothing to do!
	    END_IF;
	    
	    // Initialize the pointer for the next run
	    #statLinkedListPointer := #ioSystem.device[#statLinkedListPointer].nextDevice;
	    // If the last device is reached, reset the bit for the first run
	    //#FirstRun := TRUE;
	    // Checking the modules is done, the last device is reached
	UNTIL (#statLinkedListPointer < 0)
	END_REPEAT;
	// Reset the condition for the first run.
	#statFirstRun := TRUE;
	
	
END_FUNCTION_BLOCK

DATA_BLOCK "DiagStartupIoSystem_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"DiagStartupIoSystem"

BEGIN

END_DATA_BLOCK

FUNCTION_BLOCK "DiagStartupPlc"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_OUTPUT 
      status : Int;   // The return value of system function, where the last error occured
      instructionError : Int;   // Indicates in which system function the error occured: 1= DeviceStates PN , 2=GetName PN, 3=ModuleStates PN,  4=DeviceStates DP, 5= GetName DP. 6= ModuleStates DP
   END_VAR

   VAR_IN_OUT 
      plc : "typePlc";   // The diagnostics structure for one PLC
   END_VAR

   VAR 
      statGeoAddr {OriginalPartName := 'GEOADDR'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : GEOADDR;   // Slot information
      statGeoLaddr { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : HW_ANY;   // GEO2LOG hardware identifier
      statActualCentralModules : USInt := 0;   // Actual number of modules in the central station (PLC)
      statPlcModuleStates : Array[0..127] of Bool;   // Storage of the status of all modules in the PLC central station --> State: Problem
   END_VAR

   VAR_TEMP 
      tempModuleNum : Int;   // index module number
      tempRetValGeo : Int;   // GEO2LOG error information
      tempRetValModuleStates : Int;   // Return value system function ModuleStates
   END_VAR

   VAR CONSTANT 
      MODULE_OF_PLC : USInt := 4;   // GEO2LOG structure: HW type = 4
      CPU : USInt := 0;   // GEO2LOG structure: Area = 0
      CENTRAL_SYSTEM : USInt := 0;   // GEO2LOG structure: IO System = 0
      CENTRAL_STATION : USInt;   // GEO2LOG structure: Station = 0
      HW_ID_PLC_MODULES : HW_DEVICE := 32;   // HW ID of the PLC, which is needed for getting the module states --> fix value
      STATE_PROBLEM : USInt := 5;   // Used for instruction DeviceStates, read out all devices with several problems
      ERR_MOD_STAT_CENTRAL : USInt := 3;   // Value for output instruction error, ModuleStates local modules
   END_VAR


BEGIN
	//=============================================================================
	//Author: SIEMENS, Owner: Miklos Boros
	//        email: borosmiklos@gmail.com; miklos.boros@esss.se
	//
	//Functionality: Determine hardware identifier and module states from local
	//               modules
	// 
	//
	//Please Note:
	//        This block is part of the generated ESS Standard Code
	//        DON'T CHANGE THIS BLOCK MANUALY. Any changes will be overwritten in the next code generation.
	//
	//
	//Change log table:
	//Version  Date         Expert in charge      Changes applied
	//01.00.00 29.08.2017   ESS/ICS               First released version for PLCFactory 
	//02.00.00 09-04-2018   ESS/ICS               Major bug fix for PN/DP devices
	//=============================================================================
	
	
	//=============================================================================
	// Determine hardware identifier from LOCAL MODULES
	//=============================================================================
	#statGeoAddr.HWTYPE := #MODULE_OF_PLC;      // Hardware type 4: module
	#statGeoAddr.AREA := #CPU;                  // Area ID 0: CPU
	#statGeoAddr.IOSYSTEM := #CENTRAL_SYSTEM;   // PROFINET IO system
	                                            // (0 = central unit in the rack)
	#statGeoAddr.STATION := #CENTRAL_STATION;   // Number of the rack
	                                            // if area identifier
	                                            //  AREA = 0 (central module).
	
	FOR #tempModuleNum := 1 TO 5 DO
	  // Slot number
	  #statGeoAddr.SLOT := INT_TO_UINT(#tempModuleNum);
	  // read LADDR from local modules
	  #tempRetValGeo := GEO2LOG(GEOADDR := #statGeoAddr,
	                            LADDR => #statGeoLaddr);
	  // check Retval
	  IF (#tempRetValGeo = 0)
	  THEN
	    // store LADDR from local modules in diagnostic data block
	    #plc.slot[#tempModuleNum].slotLaddr := #statGeoLaddr;
	    #statActualCentralModules := #statActualCentralModules + 1;
	  ELSE
	    // If the return value ist not = 0 --> the device/system/module is not
	    // configured --> No error handling
	    // set LADDR from local modules to 0 in diagnostic data block
	    #plc.slot[#tempModuleNum].slotLaddr := 0;
	  END_IF;
	  // Store the actual configured devices in the diagnostics DB
	  #plc.actualConfiguredCentralModules := #statActualCentralModules;
	END_FOR;
	
	
	//=============================================================================
	// Check module states from LOCAL MODULES
	//=============================================================================
	// Check if central module are available - at least one module is always
	// configured, the PLC itself
	IF (#plc.actualConfiguredCentralModules > 1)
	THEN
	  // Check the status of the local modules
	  #tempRetValModuleStates := ModuleStates(LADDR := #HW_ID_PLC_MODULES,
	                                          MODE := #STATE_PROBLEM,
	                                          STATE := #statPlcModuleStates);
	  
	  // Check if the block call was successful
	  IF (#tempRetValModuleStates <> 0)
	  THEN
	    // Error handling
	    #status := #tempRetValModuleStates;
	    #instructionError := #ERR_MOD_STAT_CENTRAL;
	  ELSE
	    ; // Everything is ok!
	  END_IF;
	ELSE
	  ; // There are no central module configured
	END_IF;
	
	// The error LED of the PLC is flashing --> Set error state of the PLC
	#plc.errorState := TRUE;
	
	
	//=============================================================================
	// set module states from LOCAL MODULES
	//=============================================================================
	
	// If the first bit in the array is true, at least one module is faulty
	IF (#statPlcModuleStates[0] = TRUE)
	THEN
	  // Check which of the modules are faulty
	  // PLC modules array starts at index 2 for the first local module
	  FOR #tempModuleNum := 2 TO #plc.actualConfiguredCentralModules + 1 DO
	    IF (#statPlcModuleStates[#tempModuleNum] = TRUE)
	    THEN
	      #plc.slot[#tempModuleNum - 1].slotErrorState := TRUE;
	    ELSE
	      #plc.slot[#tempModuleNum - 1].slotErrorState := FALSE;
	    END_IF;
	  END_FOR;
	  
	ELSE
	  // Everything is ok!
	  FOR #tempModuleNum := 1 TO #plc.actualConfiguredCentralModules DO
	    #plc.slot[#tempModuleNum].slotErrorState := FALSE;
	  END_FOR;
	  
	END_IF;
	
END_FUNCTION_BLOCK


DATA_BLOCK "DiagStartupPlc_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"DiagStartupPlc"

BEGIN

END_DATA_BLOCK

FUNCTION "DiagnosticError" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      ioState : Word;   // IO state of the HW object
      laddr : HW_ANY;   // Hardware identifier
      channel : UInt;   // Channel number
      multiError : Bool;   // =true if more than one error is present
   END_VAR

   VAR_IN_OUT 
      plc : "typePlc";   // The diagnostics structure for one PLC
      ioSystem : Array[1..5] of "typeIoSystem";   // The diagnostics structure for one IO System
   END_VAR

   VAR_TEMP 
      tempGeoAddr {OriginalPartName := 'GEOADDR'; LibVersion := '1.0'} : GEOADDR;   // Geographical address of the disturbed Module / Device
      tempIoSystemIndex : Int;   // Index for IO System
      index : Int;   // index system
      tempRetVal : Int;   // Return value of LOG2GEO
   END_VAR

   VAR CONSTANT 
      GOOD : Word := 16#0001;   // Status of the hardware object: Bit 0: Good
      AREA_CENTRAL : UInt := 0;   // Area ID for PLC
      AREA_PROFINET : UInt := 1;   // Area ID for PROFINET IO
      AREA_PROFIBUS : UInt := 2;   // Area ID for PROFIBUS DP
   END_VAR


BEGIN
	//=============================================================================
	//Author: SIEMENS, Owner: Miklos Boros
	//        email: borosmiklos@gmail.com; miklos.boros@esss.se
	//
	//Functionality: Evaluate Diagnostic interrupt OB information for PLC and
	//               devices
	// 
	//
	//Please Note:
	//        This block is part of the generated ESS Standard Code
	//        DON'T CHANGE THIS BLOCK MANUALY. Any changes will be overwritten in the next code generation.
	//
	//
	//Change log table:
	//Version  Date         Expert in charge      Changes applied
	//01.00.00 29-08-2017   ESS/ICS               First released version for PLCFactory 
	//02.00.00 09-04-2018   ESS/ICS               Major bug fix for PN/DP devices
	//=============================================================================
	
	
	//=============================================================================
	// determine geographic address of faulty device
	//=============================================================================
	#tempRetVal := LOG2GEO(LADDR := #laddr,
	                       GEOADDR := #tempGeoAddr);
	
	
	//=============================================================================
	// evaluate diagnosis information for devices in an IO system
	//=============================================================================
	IF (#tempGeoAddr.AREA = #AREA_PROFINET)
	    OR (#tempGeoAddr.AREA = #AREA_PROFIBUS)
	THEN
	    
	    //=============================================================================
	    // determine index for IO system
	    //=============================================================================
	    FOR #index := 1 TO 5 DO
	        IF ("DiagnosticsData".ioSystem[#index].ioSystemId = #tempGeoAddr.IOSYSTEM)
	        THEN
	            #tempIoSystemIndex := #index;
	        END_IF;
	    END_FOR;
	    
	    IF (#tempIoSystemIndex <= 5)
	        AND (#tempGeoAddr.STATION <= 20)
	        AND (#tempGeoAddr.SLOT <= 20)
	    THEN
	        // evaluate diagnosis information IO system
	        IF (#ioState = #GOOD)
	        THEN
	            #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].error := FALSE;
	            #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].slot[#tempGeoAddr.SLOT].slotErrorState := FALSE;
	            
	            IF (#ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState = 2)
	            THEN
	                #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 12;
	            ELSIF (#ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState = 3)
	            THEN
	                #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 13;
	            ELSE
	                #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 1;
	            END_IF;
	        ELSE
	            #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].error := TRUE;
	            #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 2;
	            
	            #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].slot[#tempGeoAddr.SLOT].slotErrorState := TRUE;
	        END_IF;
	        
	        
	    END_IF;
	    
	    //=============================================================================
	    // evaluate diagnosis information for PLC
	    //=============================================================================
	ELSIF (#tempGeoAddr.AREA = #AREA_CENTRAL)
	THEN
	    
	    IF (#tempGeoAddr.SLOT <= 5)
	    THEN
	        // evaluate diagnosis information PLC
	        IF (#ioState = #GOOD)
	        THEN
	            #plc.slot[#tempGeoAddr.SLOT].slotErrorState := FALSE;
	        ELSE
	            #plc.slot[#tempGeoAddr.SLOT].slotErrorState := TRUE;
	        END_IF;
	        
	    END_IF;
	    
	ELSE
	    ;
	END_IF;
	
END_FUNCTION

FUNCTION "PullOrPlugModules" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      laddr : HW_IO;   // Hardware identifier
      eventClass : Byte;   // 16#38/39: module inserted, removed
      faultId : Byte;   // Fault identifier
   END_VAR

   VAR_IN_OUT 
      plc : "typePlc";   // The diagnostics structure for one PLC
      ioSystem : Array[1..5] of "typeIoSystem";   // The diagnostics structure for one IO System
   END_VAR

   VAR_TEMP 
      tempIoSystemIndex : Int;   // Index for IO System
      index : Int;   // index system
      tempGeoAddr {OriginalPartName := 'GEOADDR'; LibVersion := '1.0'} : GEOADDR;   // Geographical address of the disturbed Module / Device
      tempRetVal : Int;   // Return value of LOG2GEO
   END_VAR

   VAR CONSTANT 
      AREA_CENTRAL : UInt := 0;   // Area ID for PLC
      AREA_PROFINET : UInt := 1;   // Area ID for PROFINET IO
      AREA_PROFIBUS : UInt := 2;   // Area ID for PROFIBUS DP
      MODULE_PLUGGED : Byte := 16#38;   // (Sub)module plugged
      MODULE_PULLED : Byte := 16#39;   // (Sub)module pulled or not responding
      MODULE_MATCHES : Byte := 16#54;   // IO submodule inserted and matches configured submodule
      MODULE_OK : Byte := 16#61;   // Module inserted, module type OK
   END_VAR


BEGIN
	//=============================================================================
	//Author: SIEMENS, Owner: Miklos Boros
	//        email: borosmiklos@gmail.com; miklos.boros@esss.se
	//
	//Functionality: Evaluate Pull/plug interrupt OB information for PLC and
	//               devices
	// 
	//
	//Please Note:
	//        This block is part of the generated ESS Standard Code
	//        DON'T CHANGE THIS BLOCK MANUALY. Any changes will be overwritten in the next code generation.
	//
	//
	//Change log table:
	//Version  Date         Expert in charge      Changes applied
	//01.00.00 29.08.2017   ESS/ICS               First released version for PLCFactory 
	//02.00.00 09-04-2018   ESS/ICS               Major bug fix for PN/DP devices
	//=============================================================================
	
	
	//=============================================================================
	// determine geographic address of faulty device
	//=============================================================================
	#tempRetVal := LOG2GEO(LADDR := #laddr,
	                       GEOADDR := #tempGeoAddr);
	
	//=============================================================================
	// evaluate diagnosis information for devices in an IO system
	//=============================================================================
	IF (#tempGeoAddr.AREA = #AREA_PROFINET)
	    OR (#tempGeoAddr.AREA = #AREA_PROFIBUS)
	THEN
	    
	    //=============================================================================
	    // determine index for IO system
	    //=============================================================================
	    FOR #index := 1 TO 5 DO
	        IF (#ioSystem[#index].ioSystemId = #tempGeoAddr.IOSYSTEM)
	        THEN
	            #tempIoSystemIndex := #index;
	        END_IF;
	    END_FOR;
	    
	    IF (#tempIoSystemIndex <= 5)
	        AND (#tempGeoAddr.STATION <= 20)
	        AND (#tempGeoAddr.SLOT <= 20)
	    THEN
	        // check modules plugged
	        IF (#eventClass = #MODULE_PLUGGED)
	        THEN
	            // reset error state only if the correct module is inserted
	            IF (#faultId = #MODULE_MATCHES)
	                OR (#faultId = #MODULE_OK)
	            THEN
	                #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].error := FALSE;
	                #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].slot[#tempGeoAddr.SLOT].slotErrorState := FALSE;
	                
	                IF (#ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState = 2)
	                THEN
	                    #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 12;
	                ELSIF (#ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState = 3)
	                THEN
	                    #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 13;
	                ELSE
	                    #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 1;
	                END_IF;
	            END_IF;
	            
	            // check modules pulled  
	        ELSIF (#eventClass = #MODULE_PULLED)
	        THEN
	            #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].error := TRUE;
	            #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 2;
	            
	            #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].slot[#tempGeoAddr.SLOT].slotErrorState := TRUE;
	            
	        ELSE
	            ;
	        END_IF;
	        
	        
	    END_IF;
	    
	    //=============================================================================
	    // evaluate diagnosis information for PLC
	    //=============================================================================
	ELSIF (#tempGeoAddr.AREA = #AREA_CENTRAL)
	THEN
	    
	    IF (#tempGeoAddr.SLOT <= 5)
	    THEN
	        IF (#eventClass = #MODULE_PLUGGED)
	        THEN
	            IF (#faultId = #MODULE_MATCHES)
	                OR (#faultId = #MODULE_OK)
	            THEN
	                #plc.slot[#tempGeoAddr.SLOT].slotErrorState := FALSE;
	            END_IF;
	            
	        ELSIF (#eventClass = #MODULE_PULLED)
	        THEN
	            #plc.slot[#tempGeoAddr.SLOT].slotErrorState := TRUE;
	        ELSE
	            ;
	        END_IF;
	        
	        
	    END_IF;
	    
	ELSE
	    ;
	END_IF;
	
END_FUNCTION

FUNCTION "RackOrStationFaliure" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      laddr : HW_DEVICE;   // Hardware identifier
      eventClass : Byte;   // Event class
      faultId : Byte;   // Fault identifier
   END_VAR

   VAR_IN_OUT 
      plc : "typePlc";   // The diagnostics structure for one PLC
      ioSystem : Array[1..5] of "typeIoSystem";   // The diagnostics structure for one IO System
   END_VAR

   VAR_TEMP 
      index : Int;   // index system
      tempSlotIndex : Int;   // Loop index
      tempIoSystemIndex : Int;   // Index for IO System
      tempGeoAddr {OriginalPartName := 'GEOADDR'; LibVersion := '1.0'} : GEOADDR;   // Geographical address of the disturbed Module / Device
      tempRetVal : Int;   // Return value of LOG2GEO
      tempRetValModuleStates : Int;   // Return value system function ModuleStates
      tempDeviceModuleStates : Array[0..127] of Bool;   // Storage of the status of all modules in the PN Devices --> State: Problem
      tempLaddr : HW_DEVICE;   // logical address of the disturbed Module / Device
   END_VAR

   VAR CONSTANT 
      AREA_CENTRAL : UInt := 0;   // Area ID for PLC
      AREA_PROFINET : UInt := 1;   // Area ID for PROFINET IO
      AREA_PROFIBUS : UInt := 2;   // Area ID for PROFIBUS DP
      SLAVE_DEVICE_RET : Byte := 16#38;   // return of a DP slave / IO device
      SLAVE_DEVICE_FAIL : Byte := 16#39;   // Failure of a DP slave / IO device
      DP_SLAVE_FAIL_RET : Byte := 16#C4;   // Failure/return of a DP slave
      IO_DEVICE_FAIL_RET : Byte := 16#CB;   // Failure/return of a PROFINET IO device
      STATE_PROBLEM : USInt := 5;   // Used for instruction DeviceStates, read out all devices with several problems
   END_VAR


BEGIN
	//=============================================================================
	//Author: SIEMENS, Owner: Miklos Boros
	//        email: borosmiklos@gmail.com; miklos.boros@esss.se
	//
	//Functionality: Evaluate Rack/Station interrupt OB information for PLC and
	//               devices
	// 
	//
	//Please Note:
	//        This block is part of the generated ESS Standard Code
	//        DON'T CHANGE THIS BLOCK MANUALY. Any changes will be overwritten in the next code generation.
	//
	//
	//Change log table:
	//Version  Date         Expert in charge      Changes applied
	//01.00.00 29.08.2017   ESS/ICS               First released version for PLCFactory 
	//02.00.00 09-04-2018   ESS/ICS               Major bug fix for PN/DP devices
	//=============================================================================
	
	
	//=============================================================================
	// determine geographic address of faulty device
	//=============================================================================
	#tempRetVal := LOG2GEO(LADDR := #laddr,
	                       GEOADDR := #tempGeoAddr);
	
	//=============================================================================
	// evaluate diagnosis information for devices in an IO system
	//=============================================================================
	IF (#tempGeoAddr.AREA = #AREA_PROFINET)
	  OR (#tempGeoAddr.AREA = #AREA_PROFIBUS)
	THEN
	  
	  //===========================================================================
	  // determine index for IO system
	  //===========================================================================
	  FOR #index := 1 TO 5 DO
	    IF (#ioSystem[#index].ioSystemId = #tempGeoAddr.IOSYSTEM)
	    THEN
	      #tempIoSystemIndex := #index;
	    END_IF;
	  END_FOR;
	    
	  IF (#tempIoSystemIndex <= 5)
	    AND (#tempGeoAddr.STATION <= 20)
	    AND (#tempGeoAddr.SLOT <= 20)
	  THEN
	    // check DP slave or IO device return 
	    IF (#eventClass = #SLAVE_DEVICE_RET)
	    THEN
	      // reset error state only if the slave or device state is OK
	      IF (#faultId = #DP_SLAVE_FAIL_RET)
	        OR (#faultId = #IO_DEVICE_FAIL_RET)
	      THEN
	        #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].error := FALSE;
	        
	        FOR #tempSlotIndex := 0 TO #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].actualConfiguredModules DO
	          #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].slot[#tempSlotIndex].slotErrorState := FALSE;
	        END_FOR;
	        
	        IF (#ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState = 2)
	        THEN
	          #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 12;
	        ELSIF (#ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState = 3)
	        THEN
	          #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 13;
	        ELSE
	          #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 1;
	        END_IF;
	        
	      ELSE
	        
	        // The device is reachable, but faulty because of an error in a
	        // subordinated system --> check the modules
	        #tempRetVal := GEO2LOG(LADDR => #tempLaddr,
	                               GEOADDR := #tempGeoAddr);
	        
	        #tempRetValModuleStates := ModuleStates(LADDR := #tempLaddr,
	                                                MODE := #STATE_PROBLEM,
	                                                STATE := #tempDeviceModuleStates);
	        
	        IF (#tempRetValModuleStates = 0)
	        THEN
	          // Store the state of the different module in the diag DB
	          FOR #tempSlotIndex := 0 TO #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].actualConfiguredModules DO
	            IF (#tempDeviceModuleStates[#tempSlotIndex + 1] = TRUE)
	            THEN
	              #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].slot[#tempSlotIndex].slotErrorState := TRUE;
	            ELSE
	              #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].slot[#tempSlotIndex].slotErrorState := FALSE;
	            END_IF;
	          END_FOR;
	        END_IF;
	        
	        #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 2;
	        
	      END_IF;
	      
	      // check DP slave or IO device failure 
	    ELSIF (#eventClass = #SLAVE_DEVICE_FAIL)
	    THEN
	      #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].error := TRUE;
	      #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].errorState := 3;
	      
	      FOR #tempSlotIndex := 0 TO #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].actualConfiguredModules DO
	        IF #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].slot[#tempSlotIndex].slotLaddr <> 0
	        THEN
	          #ioSystem[#tempIoSystemIndex].device[#tempGeoAddr.STATION].slot[#tempSlotIndex].slotErrorState := TRUE;
	        END_IF;
	      END_FOR;
	      
	    ELSE
	      ;
	    END_IF;
	    
	    
	  END_IF;
	
	//=============================================================================
	//evaluate diagnosis information for PLC
	//=============================================================================
	ELSIF (#tempGeoAddr.AREA = #AREA_CENTRAL)
	THEN
	  
	  IF (#tempGeoAddr.SLOT <= 5)
	  THEN
	    // check DP slave or IO device return 
	    IF (#eventClass = #SLAVE_DEVICE_RET)
	    THEN
	      IF (#faultId = #DP_SLAVE_FAIL_RET)
	        OR (#faultId = #IO_DEVICE_FAIL_RET)
	      THEN
	        #plc.slot[#tempGeoAddr.SLOT].slotErrorState := FALSE;
	      END_IF;
	      
	      // check DP slave or IO device failure 
	    ELSIF (#eventClass = #SLAVE_DEVICE_FAIL)
	    THEN
	      #plc.slot[#tempGeoAddr.SLOT].slotErrorState := TRUE;
	    ELSE
	      ;
	    END_IF;
	    
	    
	  END_IF;
	
	ELSE
	  ;
	END_IF;
	
END_FUNCTION

FUNCTION_BLOCK "Diagnostics"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      plc : "typePlc";   // The diagnostics structure for one PLC
      ioSystem : Array[1..5] of "typeIoSystem";   // The diagnostics structure for one IO System
   END_VAR

   VAR 
      statIoSystemIndex : Int;   // Index for IO System
      statSlotIndex : Int;   // Index for Slot
      statDeviceIndex : Int;   // Index for Device
   END_VAR

   VAR_TEMP 
      retValLed : Int;
   END_VAR

   VAR CONSTANT 
      ERROR_LED : UInt := 2;   // Identification number of the ERROR LED
      ERROR_LED_ON : UInt := 4;   // LED status Color 1 flashing
   END_VAR


BEGIN
	//=============================================================================
	//Author: SIEMENS, Owner: Miklos Boros
	//        email: borosmiklos@gmail.com; miklos.boros@esss.se
	//
	//Functionality: Basic diagnostic function that has to be called in every cycle
	// 
	//
	//Please Note:
	//        This block is part of the generated ESS Standard Code
	//        DON'T CHANGE THIS BLOCK MANUALY. Any changes will be overwritten in the next code generation.
	//
	//
	//Change log table:
	//Version  Date         Expert in charge      Changes applied
	//01.00.00 29.08.2017   ESS/ICS               First released version for PLCFactory 
	//02.00.00 09-04-2018   ESS/ICS               Major bug fix for PN/DP devices
	//=============================================================================
	
	
	//=============================================================================
	// check error active
	//=============================================================================
	#retValLed := LED(LADDR := "Local~Common", LED := #ERROR_LED);
	IF #retValLed = #ERROR_LED_ON
	THEN
	    #plc.errorState := TRUE;
	ELSE
	    #plc.errorState := FALSE;
	END_IF;
	
	//=============================================================================
	// check error in IO systems active
	//=============================================================================
	FOR #statIoSystemIndex := 1 TO 5 DO
	    #ioSystem[#statIoSystemIndex].ioSystemError := FALSE;
	    
	    FOR #statDeviceIndex := 1 TO 10 DO
	        IF (#ioSystem[#statIoSystemIndex].device[#statDeviceIndex].error = TRUE)
	        THEN
	            #ioSystem[#statIoSystemIndex].ioSystemError := TRUE;
	        END_IF;
	    END_FOR;
	END_FOR;
	
	
	
END_FUNCTION_BLOCK

DATA_BLOCK "Diagnostics_iDB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"Diagnostics"

BEGIN

END_DATA_BLOCK

ORGANIZATION_BLOCK "CyclicDiagnostics"
TITLE = "Main Program Sweep (Cycle)"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	//=============================================================================
	//Author: SIEMENS, Owner: Miklos Boros
	//        email: borosmiklos@gmail.com; miklos.boros@esss.se
	//
	//Functionality: Main Cycle OB for diagnostics 
	//               OB type: Program cycle
	// 
	//
	//Please Note:
	//        This block is part of the generated ESS Standard Code
	//        DON'T CHANGE THIS BLOCK MANUALY. Any changes will be overwritten in the next code generation.
	//
	//
	//Change log table:
	//Version  Date         Expert in charge      Changes applied
	//01.00.00 29-08-2017   ESS/ICS               First released version for PLCFactory 
	//02.00.00 09-04-2018   ESS/ICS               Major bug fix for PN/DP devices
	//=============================================================================
	
	
	
	"Diagnostics_iDB"(plc:="DiagnosticsData".plc,
	                  ioSystem:="DiagnosticsData".ioSystem);
	
END_ORGANIZATION_BLOCK


ORGANIZATION_BLOCK "Diagnostic error interrupt"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	//=============================================================================
	//Author: SIEMENS, Owner: Miklos Boros
	//        email: borosmiklos@gmail.com; miklos.boros@esss.se
	//
	//Functionality: Diagnostics Error Interrupt OB
	//               OB type: Diagnostic Interrupt
	// 
	//
	//Please Note:
	//        This block is part of the generated ESS Standard Code
	//        DON'T CHANGE THIS BLOCK MANUALY. Any changes will be overwritten in the next code generation.
	//
	//
	//Change log table:
	//Version  Date         Expert in charge      Changes applied
	//01.00.00 29-08-2017   ESS/ICS               First released version for PLCFactory 
	//02.00.00 09-04-2018   ESS/ICS               Major bug fix for PN/DP devices
	//=============================================================================
	
	//
	"DiagnosticError"(ioState:=#IO_State,
	                  laddr:=#LADDR,
	                  channel:=#Channel,
	                  multiError:=#MultiError,
	                  plc:="DiagnosticsData".plc,
	                  ioSystem:="DiagnosticsData".ioSystem);
	
END_ORGANIZATION_BLOCK

ORGANIZATION_BLOCK "Pull or plug of modules"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	//=============================================================================
	//Author: SIEMENS, Owner: Miklos Boros
	//        email: borosmiklos@gmail.com; miklos.boros@esss.se
	//
	//Functionality: Pull or Plug of mudules OB
	//               OB type: Pull or Plug of devices
	// 
	//
	//Please Note:
	//        This block is part of the generated ESS Standard Code
	//        DON'T CHANGE THIS BLOCK MANUALY. Any changes will be overwritten in the next code generation.
	//
	//
	//Change log table:
	//Version  Date         Expert in charge      Changes applied
	//01.00.00 29-08-2017   ESS/ICS               First released version for PLCFactory 
	//02.00.00 09-04-2018   ESS/ICS               Major bug fix for PN/DP devices
	//=============================================================================
	
	"PullOrPlugModules"(laddr:=#LADDR,
	                    eventClass:=#Event_Class,
	                    faultId:=#Fault_ID,
	                    plc:="DiagnosticsData".plc,
	                    ioSystem:="DiagnosticsData".ioSystem);
	
END_ORGANIZATION_BLOCK

ORGANIZATION_BLOCK "Rack or station failure"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	//=============================================================================
	//Author: SIEMENS, Owner: Miklos Boros
	//        email: borosmiklos@gmail.com; miklos.boros@esss.se
	//
	//Functionality: Rack or Station faliure OB
	//               OB type: Rack or station failure
	// 
	//
	//Please Note:
	//        This block is part of the generated ESS Standard Code
	//        DON'T CHANGE THIS BLOCK MANUALY. Any changes will be overwritten in the next code generation.
	//
	//
	//Change log table:
	//Version  Date         Expert in charge      Changes applied
	//01.00.00 29-08-2017   ESS/ICS               First released version for PLCFactory 
	//02.00.00 09-04-2018   ESS/ICS               Major bug fix for PN/DP devices
	//=============================================================================
	
	"RackOrStationFaliure"(laddr:=#LADDR,
	                       eventClass:=#Event_Class,
	                       faultId:=#Fault_ID,
	                       plc:="DiagnosticsData".plc,
	                       ioSystem:="DiagnosticsData".ioSystem);
	
END_ORGANIZATION_BLOCK

ORGANIZATION_BLOCK "Startup"
TITLE = "Complete Restart"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	//=============================================================================
	//Author: SIEMENS, Owner: Miklos Boros
	//        email: borosmiklos@gmail.com; miklos.boros@esss.se
	//
	//Functionality:
	//        This OB is a Startup OB, it will be called after OB100 and before the main cycle.
	// 
	//
	//Please Note:
	//        This block is part of the generated ESS Standard Code however you should use 
	//        the proper ioSystem ID from the 
	//
	//Change log table:
	//Version  Date         Expert in charge      Changes applied
	//01.00.00 29.08.2017   ESS/ICS               First released version for PLCFactory 
	//02.00.00 09-04-2018   ESS/ICS               Major bug fix for PN/DP devices
	//=============================================================================
	
	//Initialize the Main PLC Diagnostic
	"DiagStartupPlc_iDB"(plc:="DiagnosticsData".plc);
	
	
	//Put your current IO device configuration here. HW identifiers are in the PLC Tags/System constants!
	//Initialize IOSystem1
	//"DiagStartupIoSystem_iDB"(ioSystemHwId:=268,
	//                          ioSystem:="DiagnosticsData".ioSystem[1]);
	
	
	
	
END_ORGANIZATION_BLOCK

FUNCTION "_CommsEPICSDataMap" : Void
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_TEMP
       tHashDint : DInt;
       wordTOdint AT tHashDint : Array[0..1] of Word;
       PLC_Hash : DInt;
       IOC_Hash : DInt;
   END_VAR

   BEGIN

   // PLC Hash (Generated from PLC Factory)
   #PLC_Hash := DINT#718980072;

   // Send the PLC Hash to the EPICS IOC
   "PLCToEPICS"."Word"[1] := DINT_TO_WORD(#PLC_Hash);
   "PLCToEPICS"."Word"[0] := DINT_TO_WORD(SHR(IN := #PLC_Hash, N := 16));

   // Get Hash from the EPICS IOC
   #wordTOdint[0] := "EPICSToPLC"."Word"[0];
   #wordTOdint[1] := "EPICSToPLC"."Word"[1];
   #IOC_Hash := #tHashDint;

   // Hashes Comparison
   IF (#PLC_Hash = #IOC_Hash) THEN

      // KG-GTA:ODH-PLC-01: PLC <-> EPICS Communication Mapping
      //------------------------------------------------------------------------

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 10,
                                        PLCToEPICSDataBlockOffset  := 10,
                                        EPICSToPLCCommandRegisters := "DEV_KG-GTA:ODH-PLC-01_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_KG-GTA:ODH-PLC-01_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 1,
                                        PLCToEPICSDataBlockOffset  := 20,
                                        EPICSToPLCCommandRegisters := "DEV_CTLG-CS:ODH-Area_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CTLG-CS:ODH-Area_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 1,
                                        PLCToEPICSDataBlockOffset  := 21,
                                        EPICSToPLCCommandRegisters := "DEV_CXB-CXH:ODH-Area_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CXB-CXH:ODH-Area_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 1,
                                        PLCToEPICSDataBlockOffset  := 22,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-ACH:ODH-Area_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-ACH:ODH-Area_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 23,
                                        EPICSToPLCCommandRegisters := "DEV_CTLG-CS:ODH-O2iM-20_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CTLG-CS:ODH-O2iM-20_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 26,
                                        EPICSToPLCCommandRegisters := "DEV_CTLG-CS:ODH-O2iM-21_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CTLG-CS:ODH-O2iM-21_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 29,
                                        EPICSToPLCCommandRegisters := "DEV_CTLG-CS:ODH-O2iM-22_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CTLG-CS:ODH-O2iM-22_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 32,
                                        EPICSToPLCCommandRegisters := "DEV_CXB-CXH:ODH-O2iM-13_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CXB-CXH:ODH-O2iM-13_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 35,
                                        EPICSToPLCCommandRegisters := "DEV_CXB-CXH:ODH-O2iM-14_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CXB-CXH:ODH-O2iM-14_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 38,
                                        EPICSToPLCCommandRegisters := "DEV_CXB-CXH:ODH-O2iM-15_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CXB-CXH:ODH-O2iM-15_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 41,
                                        EPICSToPLCCommandRegisters := "DEV_CXB-CXH:ODH-O2iM-16_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CXB-CXH:ODH-O2iM-16_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 44,
                                        EPICSToPLCCommandRegisters := "DEV_CXB-CXH:ODH-O2iM-17_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CXB-CXH:ODH-O2iM-17_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 47,
                                        EPICSToPLCCommandRegisters := "DEV_CXB-CXH:ODH-O2iM-18_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CXB-CXH:ODH-O2iM-18_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 50,
                                        EPICSToPLCCommandRegisters := "DEV_CXB-CXH:ODH-O2iM-19_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CXB-CXH:ODH-O2iM-19_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 53,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-ACH:ODH-O2iM-1_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-ACH:ODH-O2iM-1_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 56,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-ACH:ODH-O2iM-2_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-ACH:ODH-O2iM-2_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 59,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-ACH:ODH-O2iM-3_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-ACH:ODH-O2iM-3_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 62,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-ACH:ODH-O2iM-4_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-ACH:ODH-O2iM-4_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 65,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-ACH:ODH-O2iM-5_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-ACH:ODH-O2iM-5_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 68,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-DogSh:ODH-O2iM-12_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-DogSh:ODH-O2iM-12_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 71,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-HPGS:ODH-O2iM-10_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-HPGS:ODH-O2iM-10_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 74,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-HPGS:ODH-O2iM-11_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-HPGS:ODH-O2iM-11_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 77,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-TCH:ODH-O2iM-6_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-TCH:ODH-O2iM-6_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 80,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-TCH:ODH-O2iM-7_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-TCH:ODH-O2iM-7_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 83,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-TCH:ODH-O2iM-8_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-TCH:ODH-O2iM-8_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 3,
                                        PLCToEPICSDataBlockOffset  := 86,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-TCH:ODH-O2iM-9_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-TCH:ODH-O2iM-9_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 1,
                                        PLCToEPICSDataBlockOffset  := 89,
                                        EPICSToPLCCommandRegisters := "DEV_CXB-CXH:ODH-RIO-2_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_CXB-CXH:ODH-RIO-2_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 1,
                                        PLCToEPICSDataBlockOffset  := 90,
                                        EPICSToPLCCommandRegisters := "DEV_HCB-ACH:ODH-RIO-1_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_HCB-ACH:ODH-RIO-1_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");

      "_CommsEPICSDataMappingFBFactory"(EPICSToPLCLength           := 0,
                                        EPICSToPLCDataBlockOffset  := 10,
                                        EPICSToPLCParametersStart  := 0,
                                        PLCToEPICSLength           := 1,
                                        PLCToEPICSDataBlockOffset  := 91,
                                        EPICSToPLCCommandRegisters := "DEV_TS2-020Row:CnPw-U-001_iDB".CommandReg,
                                        PLCToEPICSStatusRegisters  := "DEV_TS2-020Row:CnPw-U-001_iDB".StatusReg,
                                        EPICSToPLCDataBlock        := "EPICSToPLC"."Word",
                                        PLCToEPICSDataBlock        := "PLCToEPICS"."Word");


   END_IF;

END_FUNCTION

//########## EPICS->PLC datablock ##########
DATA_BLOCK "EPICSToPLC"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   STRUCT
      "Word" : Array[0..9] of Word;
   END_STRUCT;


BEGIN
END_DATA_BLOCK

//########## PLC->EPICS datablock ##########
DATA_BLOCK "PLCToEPICS"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
NON_RETAIN
   STRUCT
      "Word" : Array[0..91] of Word;
   END_STRUCT;


BEGIN
END_DATA_BLOCK

FUNCTION "_CommsEPICS" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	//Heartbeat PLC->EPICS
	IF "Utilities".Pulse_1s THEN
	    "PLCToEPICS"."Word"[2] := "PLCToEPICS"."Word"[2] + 1;
	    IF "PLCToEPICS"."Word"[2] >= 32000 THEN
	        "PLCToEPICS"."Word"[2] := 0;
	    END_IF;
	END_IF;

	// Call the comms block to provide PLC<->EPICS comms
	"_CommsPLC_EPICS_DB"(Enable         := "Utilities".AlwaysOn,
	                     SendTrigger    := "Utilities".Pulse_200ms,
	                     BytesToSend    := 184,
	                     InterfaceID    := 72,
	                     S7ConnectionID := 256,
	                     MBConnectionID := 255,
	                     S7Port         := 2000,
	                     MBPort         := 502,
	                     PLCToEPICSData := "PLCToEPICS"."Word",
	                     EPICSToPLCData := "EPICSToPLC"."Word");

	//Map all devices command and status registers to EPICS->PLC and PLC->EPICS data exchange blocks
	"_CommsEPICSDataMap"();

END_FUNCTION

